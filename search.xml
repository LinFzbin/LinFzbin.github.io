<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue前台项目笔记-01</title>
      <link href="/2021/09/24/vue-qian-tai-xiang-mu-bi-ji-01/"/>
      <url>/2021/09/24/vue-qian-tai-xiang-mu-bi-ji-01/</url>
      
        <content type="html"><![CDATA[<h1 id="vue前台项目笔记-01"><a href="#vue前台项目笔记-01" class="headerlink" title="vue前台项目笔记-01"></a>vue前台项目笔记-01</h1><p>本篇笔记主要内容为<strong>路由</strong>，可以结合之前路由的相关笔记一起来复习。</p><h3 id="git管理代码"><a href="#git管理代码" class="headerlink" title="git管理代码"></a>git管理代码</h3><ol><li><p>创建<strong>本地仓库</strong></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol><li><p>创建<strong>远程仓库</strong></p></li><li><p>本地仓库和远程仓库<strong>连接</strong></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git remote add xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol><li><p>本地代码改变，<strong>推向</strong>远程仓库</p></li><li><p>远程代码改变，<strong>拉向</strong>本地仓库</p></li><li><p>clone </p></li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 初始化本地仓库git init# addgit add .# commitgit commit -m "xxx"# 本地推向远程仓库  这里是没有分支 只有一个主分支git push origin master# 远程拉向本地仓库git pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路由组件和非路由组件的区别"><a href="#路由组件和非路由组件的区别" class="headerlink" title="路由组件和非路由组件的区别"></a>路由组件和非路由组件的区别</h3><h4 id="注册的时候："><a href="#注册的时候：" class="headerlink" title="注册的时候："></a>注册的时候：</h4><ul><li>非路由组件是在<strong>使用</strong>的组件中注册</li><li>路由组件时在<strong>路由配</strong>置中注册</li></ul><h4 id="使用的时候："><a href="#使用的时候：" class="headerlink" title="使用的时候："></a>使用的时候：</h4><ul><li>非路由组件使用注册的<strong>组件标签</strong></li><li>路由组件在<strong>声明式路由导航</strong>（<strong>router-link</strong>、<strong>router-view</strong>）或<strong>编程式路由导航</strong>（<strong>push</strong>、<strong>replace</strong>、<strong>go</strong>）中使用</li></ul><h4 id="生命周期不同："><a href="#生命周期不同：" class="headerlink" title="生命周期不同："></a>生命周期不同：</h4><p><strong>路由组件</strong>在切换时，会被<strong>销毁重建</strong>（<strong>keep-alive</strong> 能让路由组件在切换时不被销毁重建）；而路由组件不会被销毁重建</p><h3 id="路由器相关配置流程："><a href="#路由器相关配置流程：" class="headerlink" title="路由器相关配置流程："></a>路由器相关配置流程：</h3><ol><li><p>安装<strong>路由</strong></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm i vue-router -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol><li><p>引入并<strong>声明</strong>使用的路由对象</p></li><li><p><strong>创建</strong>并<strong>暴露</strong>一个路由对象</p></li><li><p>在 <strong>main.js</strong> 文件中将路由器注册到 <strong>Vue</strong> 的配置对象中</p></li></ol><p>这里插一个小注意点，就是 <strong>less-loader</strong> 版本的问题，安装的<strong>版本</strong>建议如下，不然会报错</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm i less-loader@7.3.0 -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="params参数和query参数的区别"><a href="#params参数和query参数的区别" class="headerlink" title="params参数和query参数的区别"></a>params参数和query参数的区别</h3><ul><li><strong>params</strong>参数需要在路由配置中<strong>声明接收</strong> <strong>params</strong> 参数（属于路径中的一部分）</li><li><strong>query</strong>参数不需要声明接收</li></ul><h3 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h3><h4 id="Q1：path和params参数能不能配合使用？"><a href="#Q1：path和params参数能不能配合使用？" class="headerlink" title="Q1：path和params参数能不能配合使用？"></a>Q1：path和params参数能不能配合使用？</h4><p><strong>params</strong>参数不能和<strong>path</strong>配合使用，只能和 <strong>name</strong> 命名路由配合使用</p><h4 id="Q2：params怎样才能可传可不传？"><a href="#Q2：params怎样才能可传可不传？" class="headerlink" title="Q2：params怎样才能可传可不传？"></a>Q2：params怎样才能可传可不传？</h4><p>在声明接收时，在<strong>path</strong>路径后面的<strong>占位符</strong>加一个 <strong>‘ ？’</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">path<span class="token operator">:</span> <span class="token string">'/search/:keyword?'</span><span class="token punctuation">,</span>  <span class="token comment">// 占位符后面加 ？ 表示这个params参数可传可不传</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Q3：params接收空字符串怎么办？"><a href="#Q3：params接收空字符串怎么办？" class="headerlink" title="Q3：params接收空字符串怎么办？"></a>Q3：params接收空字符串怎么办？</h4><p>接收的<strong>params</strong>参数为空字符串时，</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">params<span class="token operator">:</span> <span class="token punctuation">{</span>                    keyword<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyword <span class="token operator">||</span> <span class="token keyword">undefined</span>  <span class="token comment">// 这里用 undefined是当params参数为空字符串时 路由路径不会出错</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Q4-props简化写法"><a href="#Q4-props简化写法" class="headerlink" title="Q4: props简化写法"></a>Q4: props简化写法</h4><p>这里只是还有两种其他的<strong>props</strong>写法，见路由的笔记。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">props</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    keyword<span class="token operator">:</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>keyword<span class="token punctuation">,</span>  <span class="token comment">// params参数</span>                    keyword1<span class="token operator">:</span> route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword1  <span class="token comment">// query参数</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> vue项目 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prototype Completion with Primitive Knowledge for Few-Shot Learning阅读笔记</title>
      <link href="/2021/09/23/prototype-completion-with-primitive-knowledge-for-few-shot-learning-yue-du-bi-ji/"/>
      <url>/2021/09/23/prototype-completion-with-primitive-knowledge-for-few-shot-learning-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Prototype-Completion-with-Primitive-Knowledge-for-Few-Shot-Learning"><a href="#Prototype-Completion-with-Primitive-Knowledge-for-Few-Shot-Learning" class="headerlink" title="Prototype Completion with Primitive Knowledge for Few-Shot Learning"></a>Prototype Completion with Primitive Knowledge for Few-Shot Learning</h1><h1 id="利用原语知识补全原型"><a href="#利用原语知识补全原型" class="headerlink" title="利用原语知识补全原型"></a>利用原语知识补全原型</h1><p>本文是发表在CVPR上的一篇小样本学习（<strong>few-shot learning</strong>）方向的文章，<a href="https://arxiv.org/abs/2009.04960">文章链接</a>、<a href="https://github.com/zhangbq-research/Prototype_Completion_for_FSL">代码链接</a> 。</p><p>本文做的就是得到一个有<strong>代表性</strong>的<strong>类别原型</strong>，也就是<strong>类别中心</strong>（<strong>包含所有的代表性特征</strong>）。</p><p>样本为什么会偏离<strong>类别中心</strong>？<strong>样本残缺</strong>、 <strong>背景干扰</strong>、<strong>细节模糊</strong>…也就是丢失了一些有<strong>代表性</strong>的<strong>属性特征</strong>；小样本学习中 <strong>support set</strong> 的（<strong>n-way k-shot</strong>） <strong>k</strong> 值很小，这样得到的<strong>类别原型</strong>，就是<strong>不</strong>具有<strong>代表性</strong>；本文提出的方法就是如何利用更多的<strong>先验知识</strong>去得到得到更具有代表性的<strong>类别原型</strong>。</p><h3 id="Overall-Framework"><a href="#Overall-Framework" class="headerlink" title="Overall Framework"></a>Overall Framework</h3><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210905164406119.png" alt="原型补全网络框架图"></p><p>上图为本文的框架图</p><h3 id="Pre-Training"><a href="#Pre-Training" class="headerlink" title="Pre-Training"></a>Pre-Training</h3><p>此阶段是基于 <strong>Base Class</strong>，对于<strong>miniimagenet</strong>数据集，<strong>base class</strong>就为 <strong>train为64个 classes</strong>，目的是得到特征提取器  <script type="math/tex">f_{\theta_f}</script>​​</p><h3 id="Learning-to-Complete-Prototypes"><a href="#Learning-to-Complete-Prototypes" class="headerlink" title="Learning to Complete Prototypes"></a>Learning to Complete Prototypes</h3><h4 id="Wordnet相关知识"><a href="#Wordnet相关知识" class="headerlink" title="Wordnet相关知识"></a>Wordnet相关知识</h4><p> <strong>WordNet</strong>是由 <strong>Princeton</strong> 大学的心理学家，语言学家和计算机工程师联合设计的一种基于认知语言学的英语词典。它不是光把单词以字母顺序排列，而且按照单词的意义组成一个“单词的网络”。</p><p> 它是一个覆盖范围宽广的英语词汇语义网。名词，动词，形容词和副词各自被组织成一个同义词的网络，每个同义词集合都代表一个基本的语义概念，并且这些集合之间也由各种关系连接。</p><p> <strong>WordNet</strong> 包含描述概念含义，<strong>一义多词</strong>，<strong>一词多义</strong>，<strong>类别归属</strong>，<strong>近义</strong>，<strong>反义</strong>等问题，访问以下网页，可使用<strong>wordnet</strong>的<a href="http://wordnetweb.princeton.edu/perl/webwn">基本功能</a> </p><p>这里 <strong>wordnet</strong> 的安装需要自己<a href="https://github.com/nltk/nltk_data/tree/gh-pages">下载</a> ，得到 <strong>nltk_data-gh-pages.zip</strong> 文件；解压后找到<strong>corpora</strong>，发现里面就有wordnet；将其放到任意报错的查找路径中，解决此问题的<a href="https://www.cxyzjd.com/article/AsanoKiri/107434200">参考链接</a>。</p><p>在<strong>imagenet</strong>中，<strong>类别</strong>是<strong>词性+8位offset</strong>命名的，这被称为<strong>wnid</strong>，因此每一个类别均对应着一条<strong>Synset</strong>主键。所以知道了<strong>Synset</strong>主键之后，我们也可以得到其<strong>wnid（词性+8位offset）</strong> </p><p><strong>glove.840B.300d.txt</strong> 文件<a href="https://www.cxymm.net/article/sinat_26811377/107312579">下载地址</a></p><p>便于理解： 以下数据都是指在<strong>miniImagenet</strong>数据集上的数据。</p><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>首先利用 <strong>Wordnet</strong> 构建一个 <strong>原语知识</strong>，也就是<strong>每个类别都有哪些相关的属性</strong>，就是根据每个类别的 <strong>wnid</strong> 得到此类别所有的相关属性；对于<strong>miniimagenet数据集</strong>来说，<strong>100</strong>个类别的相关属性为<strong>171</strong>；再利用 <strong>Glove</strong> 将<strong>所有属性</strong>转换为<strong>向量表示</strong>，每个属性是一个<strong>300维</strong>的向量。</p><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>基于上述的<strong>原语知识</strong>以及预训练得到的<strong>特征提取器</strong>，进一步提取一些先验知识。对于<strong>base class </strong>，每个类别有<strong>600</strong>张图片，<strong>平均</strong>这<strong>600</strong>张图片的特征，<strong>均值特征</strong>作为此类别<strong>真正的类原型</strong>；公式如下，这里<script type="math/tex">\mathcal{D}_{base}^k</script>​​​ 表示<strong>base class</strong>中类别 <strong>k</strong> 的所有图片：</p><script type="math/tex; mode=display">p_k^{real} = \frac{1}{\mathcal{D}_{base}^k} \sum_{(x,y)\in \mathcal{D}_{base}^k} f_{\theta_f}(x)</script><p>针对每个<strong>属性</strong>（这里的属性指所有<strong>base class</strong>上的所有的属性 <strong>71个</strong>），在<strong>base class</strong>中找到此属性所有相关的类别；假如当前属性有 <strong>n</strong> 个相关的类别（基类中有 <strong>n</strong> 个类别包含此属性 ），那么与此属性相关的类别的所有图片数为 <strong>600*n</strong> ，平均这<strong>600*n</strong> 张图片的特征，能够得到该<strong>属性</strong>特征分布的<strong>均值</strong>和<strong>标准差</strong>；公式如下：</p><script type="math/tex; mode=display">\mu_{a_i} = \frac{1}{|\mathcal{D}_{base}^{a_i}|} \sum_{(x,y)\in \mathcal{D}_{base}^{a_i}} f_{\theta_f}(x)</script><script type="math/tex; mode=display">\sigma_{a_i} = \frac{1}{|\mathcal{D}_{base}^{a_i}|} \sum_{(x,y)\in \mathcal{D}_{base}^{a_i}} (f_{\theta_f}(x) - \mu_{a_i})^2</script><h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p>最后，获得上述<strong>先验知识</strong>（<strong>原语知识</strong>、真正的<strong>base class类别原型</strong>和<strong>属性</strong>特征分布的<strong>均值</strong>和<strong>方差</strong>）后；构建一个<strong>原型补全网络</strong>，模仿<strong>小样本分类任务</strong>构建一系列的<strong>原型补全任务</strong>；这里补充下，在 <strong>train</strong> 的时候，<strong>batch_size = 128</strong>, <strong>num_batch = 38400/128 = 30</strong>，相当于每次将<strong>一张图片</strong>当作<strong>不完整的类原型</strong>，训练原型补全网络去<strong>补全原型</strong>；在 <strong>val</strong> 的时候，构建的是小样本分类任务，<strong>n-way k-shot</strong>，去<strong>验证</strong>原型补全网络的效果；使用<strong>均方误差</strong>来训练，公式如下：</p><script type="math/tex; mode=display">\min_{\theta_c} \mathbb{E}_{(p_k,p_k^{real}) \in \mathbb{T}} MSE(f_{\theta_c}(p_k,\mathcal{R},\mathcal{H},\mathcal{Z}),p_k^{real})</script><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210905175945735.png" alt="原型补全网络结构"></p><p><strong>原型补全网络（ProtoComNet）</strong>，是一个<strong>编码器</strong>-<strong>聚合器</strong>-<strong>解码器</strong>的网络结构，上图所示；<strong>编码器</strong>的目的是<strong>降维</strong>，将均值原型（<strong>train</strong> 时的<strong>均值原型</strong>指其实就是 <strong>base class</strong> 中的一张图片）和<strong>属性特征</strong>映射到低维空间中（<strong>512—&gt;256</strong>）；<strong>聚合器</strong>对不同属性的重要性进行评估，利用加权和的方式在低维空间上去补全不完整的原型；<strong>解码器</strong>输出补全的原型；</p><h3 id="Meta-Training"><a href="#Meta-Training" class="headerlink" title="Meta-Training"></a>Meta-Training</h3><p>这部分核心就是提出一个<strong>原型融合策略</strong>，构建<strong>小样本分类任务</strong>，<strong>均值原型</strong>  $p_k$​  公式如下：</p><script type="math/tex; mode=display">p_k = \frac {1}{S_k} \sum_{x \in S_k} f_{\theta_f}(x)</script><p><strong>补全原型公式</strong> $\hat{p_k}$​ 如下：</p><script type="math/tex; mode=display">\hat{p_k} = f_{\theta_c}(p_k,\mathcal{R},\mathcal{H},\mathcal{Z})</script><p>对于一张<strong>query image</strong> $x \in  Q$​ ，基于 ${p_k}$​​​ 计算当前图片属于类别 <strong>k</strong> 的概率；公式如下：</p><script type="math/tex; mode=display">P(y=k|x) = \frac{e^{d(f_{\theta_f}(x),p_k)\cdot \lambda}}{\sum_c e^{d(f_{\theta_f}(x),p_c)\cdot \lambda }}</script><p>对于 <strong>support image</strong> $x \in S$​，属于类别 <strong>k</strong> 的概率就是 <strong>独热向量</strong> ；$p_k$​ 的<strong>均值</strong>和<strong>标准差</strong> 计算公式如下：</p><script type="math/tex; mode=display">\mu_k = \frac {1}{\sum_{x \in S \cup Q}}\sum_{x \in S \cup Q}P(k|x)f_{\theta_f}(x)</script><script type="math/tex; mode=display">\sigma_k = \sqrt{\frac {1}{\sum_{x \in S \cup Q}}\sum_{x \in S \cup Q}P(k|x)(f_{\theta_f}(x) - \mu_k)^2}</script><p>这部分属于 <strong>Transductive</strong>，这里使用了<strong>query images</strong>来重新计算 $p_k$​​ 的<strong>均值</strong>和<strong>标准差</strong>；同理，<strong>补全原型</strong> $\hat{p_k}$​​  的<strong>均值</strong>和<strong>标准差</strong>也做类似的计算；​</p><p><strong>均值原型 </strong> $p_k$​ 和<strong>补全原型</strong> $\hat{p_k}$​​  都遵循<strong>多元高斯分布（MGD）</strong></p><p>$\hat{p_k}$​​   作为<strong>先验分布</strong>      $p_k$​ 作为<strong>条件似然</strong> </p><p>计算出<strong>融合原型 </strong>  $\hat{p_k}^`$​  的<strong>均值</strong>和<strong>标准差</strong> （这里具体推导见论文附录）</p><script type="math/tex; mode=display">\hat {\mu}_k^` = \frac {\sigma_k^2 \bigodot \hat{\mu}_k + \hat{\sigma}_k^2 \bigodot \mu_k}{\hat{\sigma}_k^2 + \sigma_k^2}</script><script type="math/tex; mode=display">diag({\sigma^`_k}^2) = diag(\frac{\sigma_k^2 \bigodot {\sigma_k^`}^2}{  {\sigma_k^`}^2 + \sigma_k^2})</script><h3 id="Meta-Test"><a href="#Meta-Test" class="headerlink" title="Meta-Test"></a>Meta-Test</h3><p>在 <strong>novel class</strong> 执行跟<strong>元训练</strong>阶段一样的操作。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文用<strong>wordnet</strong>和<strong>glove</strong>获取更多的先验知识，将<strong>nlp</strong>相关内容和<strong>小样本</strong>学习进行结合，<strong>idea</strong>还是蛮新的；但是落地难度上比较大，因为它的数据集里比如<strong>miniImagenet</strong>里的类别，都是属性比较多的（鸟，狗，蛇等）；但分类模型一般会落地于一些专业问题上，而专有名词的话，属性可能就比较难找到了；为了获得更多的先验知识以及补全均值原型，作者做了<strong>预训练</strong>、<strong>构建原语知识</strong>、<strong>补全原型网络</strong>、<strong>元训练</strong>以及<strong>元测试</strong>一系列操作；本文的<strong>核心</strong>就是去寻找一个更好更具代表性的<strong>类别原型</strong>，之后再进行分类。</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小样本学习 </tag>
            
            <tag> few shot learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepEMD:Differentiable Earth Mover’s Distance for Few-Shot Learning阅读笔记</title>
      <link href="/2021/09/22/deepemd-differentiable-earth-mover-s-distance-for-few-shot-learning-yue-du-bi-ji/"/>
      <url>/2021/09/22/deepemd-differentiable-earth-mover-s-distance-for-few-shot-learning-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="DeepEMD-Differentiable-Earth-Mover’s-Distance-for-Few-Shot-Learning"><a href="#DeepEMD-Differentiable-Earth-Mover’s-Distance-for-Few-Shot-Learning" class="headerlink" title="DeepEMD: Differentiable Earth Mover’s Distance for Few-Shot Learning"></a>DeepEMD: Differentiable Earth Mover’s Distance for Few-Shot Learning</h1><h1 id="用于小样本学习的推土机距离"><a href="#用于小样本学习的推土机距离" class="headerlink" title="用于小样本学习的推土机距离"></a>用于小样本学习的<strong>推土机距离</strong></h1><p>本文是发表在CVPR上的一篇小样本学习（<strong>few-shot learning</strong>）方向的文章，<a href="https://arxiv.org/abs/2003.06777v1">文章链接</a>、<a href="https://github.com/icoz69/DeepEMD">代码链接</a> 。</p><p>本文提出了一种基于<strong>度量学习</strong>的小样本学习算法（<strong>DeepEMD</strong>），将一张图片拆分成多个图块(一张图片的局部)，然后引入一种新的距离度量方式—<strong>Earth Mover’s Distance</strong>（<strong>EMD</strong> 推土机距离），<strong>EMD</strong>其实就是线性规划中运输问题的最优解；通过线性规划的方式寻找两张图片各个图块间的最佳匹配方式，为不同位置的图块赋予不同的权重，从而表示两张图片间的相似度。</p><h3 id="线性规划中的运输问题"><a href="#线性规划中的运输问题" class="headerlink" title="线性规划中的运输问题"></a>线性规划中的运输问题</h3><p>这里先以一个线性规划的运输问题为例，了解之后 <strong>EMD</strong> 所需要的已知量，以及之后如何用 <strong>emd</strong> 去求解两张图片的相似度。</p><p>举个<strong>栗子：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">运输成本</th><th style="text-align:center"><strong>销地 $D_1$​​</strong></th><th style="text-align:center"><strong>销地 </strong>$D_2$​​</th><th style="text-align:center"><strong>销地 </strong>$D_2$​​</th><th style="text-align:center"><strong>产量（供货量）</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>产地 $O_1$​​​</strong></td><td style="text-align:center"><strong>6</strong> $x_{11}$​</td><td style="text-align:center"><strong>4</strong> $x_{12}$​</td><td style="text-align:center"><strong>6</strong> $x_{13}$​</td><td style="text-align:center"><strong>200</strong></td></tr><tr><td style="text-align:center"><strong>产地 $O_2$​​​</strong></td><td style="text-align:center"><strong>6</strong> $x_{21}$​</td><td style="text-align:center"><strong>5</strong> $x_{22}$​</td><td style="text-align:center"><strong>5</strong> $x_{23}$​</td><td style="text-align:center"><strong>300</strong></td></tr><tr><td style="text-align:center"><strong>销量（需求量）</strong></td><td style="text-align:center"><strong>150</strong></td><td style="text-align:center"><strong>150</strong></td><td style="text-align:center"><strong>200</strong></td></tr></tbody></table></div><p><strong>最小化总运输成本：</strong></p><p>​        </p><script type="math/tex; mode=display">\min f =6x_{11}+4x_{12}+6x_{13}+6x_{21}+5x_{22}+5x_{23}</script><p><strong>限制条件：</strong></p><script type="math/tex; mode=display">x_{i,j}\geqslant0 \quad\quad i=1,2;j=1,2,3  \\x_{11}+x_{12}+x_{13} = 200  \\x_{21}+x_{22}+x_{23} = 300  \\x_{11}+x_{21} = 150  \\x_{12}+x_{22} = 150  \\x_{13}+x_{23} = 200  \\</script><p>综上所述，所需要的<strong>已知量</strong>是 两地之间的<strong>单位运输成本</strong>、产地的<strong>产量</strong>、销地的<strong>销量</strong>。</p><p>货源地(<strong>产地</strong>) <strong>O = {$o_i|i=1,…,m$​​​​}</strong>           $o_i$​​​​：货源地(<strong>产地</strong>) <strong>i</strong> 的供货量</p><p>目的地(<strong>销地</strong>) <strong>D = {$d_i|i=1,…,k$​​}</strong>            $d_j$​​：目的地(<strong>销地</strong>) <strong>j</strong> 的需求量</p><p>$c_{i,j}$​​​​：  <strong>i</strong> 和 <strong>j</strong> 两地的<strong>单位运输成本</strong></p><p>$x_{i,j}$​​​​：  <strong>i</strong> 和 <strong>j</strong> 两地的<strong>运输量</strong></p><p><strong>Objective Function</strong>：寻找总运输成本最低的<strong>运输方案</strong>  $\tilde{X}={\tilde{x}_{i,j}|i=1,…,m;j=1,…,k}$​​</p><script type="math/tex; mode=display">\min_{x_{i,j}}=\sum_{i=1}^m\sum_{j=1} ^k c_{i,j} x_{i,j}</script><p><strong>Subject to</strong></p><script type="math/tex; mode=display">x_{i,j}\geqslant0 \quad\quad i=1,...,m;j=1,...,k \\    o_i = \sum_{j=1}^k x_{i,j} \quad\quad i=1,...,m \\    d_j = \sum_{i=1}^m x_{i,j} \quad\quad j=1,...,k</script><h3 id="EMD-for-Few-shot-Classification"><a href="#EMD-for-Few-shot-Classification" class="headerlink" title="EMD for Few-shot Classification"></a>EMD for Few-shot Classification</h3><p><strong>局部特征表示</strong>可能提供跨类别的可迁移信息，将一张图像分解成<strong>一组局部特征表示</strong>，并通过<strong>cross-reference mechanism（交差参考机制）</strong>为两幅图像中<strong>局部特征表示</strong>分配适当的权值，使用他们之间的最优匹配代价来表示两张图像的差异。</p><h4 id="三种方法来生成图像的局部特征表示："><a href="#三种方法来生成图像的局部特征表示：" class="headerlink" title="三种方法来生成图像的局部特征表示："></a><strong>三种方法</strong>来生成图像的<strong>局部特征表示</strong>：</h4><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210922194857585.png" alt="三种方法生成局部描述子"></p><ol><li><p><strong>Fully convolutional Network（DeepEMD-FCN）</strong></p><p>​    一张图片的特征表示 $U\in R^{H\times W\times C}$​​                 <strong>一组局部特征表示集合</strong> <script type="math/tex">U=[u_1,u_2,...,u_{HW}]</script>​​</p><p>这里的 $u_i\quad i=1,…,HW$​​​ 当做集合中的<strong>节点</strong>   ​  </p><p>​    这里的<strong>节点</strong>其实就是 <strong>DN4</strong> 论文中的<strong>局部描述子</strong>（<strong>local descriptor</strong>）的概念，表示一张图片中的一个<strong>局部块</strong>。</p></li><li><p><strong>Dividing the input image into grids（DeepEMD-Grid）</strong></p><p>​    先将<strong>image</strong>划分成 $H\times W$​​ 个区域，再将每个区域分别送入到卷积神经网络中</p></li><li><p><strong>Random sampling image patches（DeepEMD-Sampling）</strong></p><p>​    在图片中随机取样 <strong>M</strong> 个 <strong>patches</strong>（具有不同长宽和纵横比），再将这些 <strong>patches</strong> 缩放到<strong>相同</strong>的输入大小，输入到神经网络中</p></li></ol><p>得到局部特征表示后，通过两个图像局部特征表示的节点 <script type="math/tex">u_i</script> 和 <script type="math/tex">v_j</script> 得到这两个节点之间的差异 <script type="math/tex">c_{i,j}</script>（也就是线性规划中的<strong>单位运输成本</strong> <script type="math/tex">c_{i,j}</script>​ ）；这里是先求两节点之间的余弦相似度，用 “1-余弦相似度”就表明两者的差异；</p><script type="math/tex; mode=display">c_{i,j} = 1 - \frac{u_i^Tv_j}{||u_i|||v_j||}</script><h4 id="cross-reference-mechanism（交差参考机制）"><a href="#cross-reference-mechanism（交差参考机制）" class="headerlink" title="cross-reference mechanism（交差参考机制）"></a>cross-reference mechanism（交差参考机制）</h4><p>这里将一张<strong>query image</strong>的<strong>所有局部特征向量</strong>当成<strong>所有的货源地</strong>，一张<strong>suppor image</strong>的<strong>所有局部特征向量</strong>当成<strong>所有的目的地</strong></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210923092319343.png" alt="局部特征表示"></p><p>$u_i$ 和 $v_j$ 分别代表 <strong>query image</strong> 和 <strong>support image</strong> 的<strong>局部特征表示</strong>，这里的 $o_i$（<strong>产量</strong>）表示 <strong>query image</strong> 中的<strong>局部特征向量</strong>$u_i$和 <strong>support image</strong> 中的<strong>所有局部特征向量</strong>的相关性评分，作为权重值(也就是  $o_i$​​ ​的产量)：</p><script type="math/tex; mode=display">o_i=\max \{u_i^T \frac{\sum_{j=1}^{HW}v_j}{HW} , 0\}</script><p>​    <strong>max()</strong> 函数保证 <strong>非负</strong></p><p>对权值进行 <strong>标准化</strong>：</p><script type="math/tex; mode=display">\hat{o}_i=o_i \frac{HW}{\sum_{j=1}^{HW} o_j}</script><p>这里其实可以直接写作（也就是每个产地的产量除以 <strong>所有</strong> 产地的产量，做一个 <strong>标准化</strong> ，注：这里的标准化推导的 <strong>前提</strong> 是两向量的内积大于 <strong>0</strong> ）：</p><script type="math/tex; mode=display">\begin{aligned}\hat{o}_i &= o_i \frac{HW}{\sum_{i=1}^{HW} o_i} \\  &=\max \{u_i^T\ \frac{\sum_{j=1}^{HW}v_j}{HW} , 0\}  \frac{HW}{\sum_{i=1}^{HW} o_i} \\  &=u_i^T\ \frac{\sum_{j=1}^{HW}v_j}{HW}\frac{HW}{\sum_{i=1}^{HW} o_i} \\  &=u_i^T\frac{\sum_{j=1}^{HW}v_j}{\sum_{i=1}^{HW} o_i} \end{aligned}</script><p><strong>同理</strong>：可以计算出<strong>需求量</strong>$d_j$​​</p><script type="math/tex; mode=display">d_j=\max \{v_j^T \frac{\sum_{i=1}^{HW} u_i}{HW} , 0\}</script><script type="math/tex; mode=display">\begin{aligned}\hat{d}_j &= d_j \frac{HW}{\sum_{i=1}^{HW} o_i} \\  &=\max \{v_j^T\ \frac{\sum_{i=1}^{HW}u_i}{HW} , 0\}  \frac{HW}{\sum_{j=1}^{HW} d_j} \\  &=v_j^T\ \frac{\sum_{i=1}^{HW}u_i}{HW}\frac{HW}{\sum_{j=1}^{HW} d_j} \\  &=v_j^T\frac{\sum_{i=1}^{HW}u_i}{\sum_{j=1}^{HW} d_j} \end{aligned}</script><p>最后求的是两张图片之间的<strong>相似度</strong>，对于两张图片 $U$​  和 $V$​</p><script type="math/tex; mode=display">1 - c_{ij} = \frac{u_i^Tv_j}{||u_i|||v_j||} \\s(U,V) = \sum_{i=1}^{HW} \sum_{j=1}^{HW} (1-c_{ij}) \tilde{x}_{ij}</script><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210923100204245.png" alt="框架图"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>阅读本篇论文先需要了解线性规划的 <strong>运输问题</strong> 以及 <strong>DN4</strong>（<a href="https://arxiv.org/abs/1903.12290">论文链接 </a>、<a href="https://linfzbin.github.io/2021/09/21/revisiting-local-descriptor-based-image-to-class-measure-for-few-shot-learning-yue-du-bi-ji/">DN4论文笔记</a>），本篇笔记都有提到相关内容；这篇论文是将 <strong>EMD</strong> 作为距离<strong>度量指标</strong>，并且用<strong>cross-reference mechnism</strong>进行权重生成；这里也验证了一下论文的准确率，当然这里使用的是作者提供的训练好的权重文件，准确率跟论文基本相符。</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小样本学习 </tag>
            
            <tag> few shot learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Revisiting Local Descriptor based Image-to-Class Measure for Few-shot Learning阅读笔记</title>
      <link href="/2021/09/21/revisiting-local-descriptor-based-image-to-class-measure-for-few-shot-learning-yue-du-bi-ji/"/>
      <url>/2021/09/21/revisiting-local-descriptor-based-image-to-class-measure-for-few-shot-learning-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Revisiting-Local-Descriptor-based-Image-to-Class-Measure-for-Few-shot-Learning"><a href="#Revisiting-Local-Descriptor-based-Image-to-Class-Measure-for-Few-shot-Learning" class="headerlink" title="Revisiting Local Descriptor based Image-to-Class Measure for Few-shot Learning"></a>Revisiting Local Descriptor based Image-to-Class Measure for Few-shot Learning</h1><h1 id="局部描述子"><a href="#局部描述子" class="headerlink" title="局部描述子"></a>局部描述子</h1><p>本文是发表在CVPR上的一篇小样本学习（<strong>few-shot learning</strong>）方向的文章，<a href="https://arxiv.org/abs/1903.12290">文章链接</a>、<a href="https://github.com/WenbinLee/DN4">代码链接</a> 。</p><p>本文采用基于<strong>度量学习</strong>的方式实现小样本学习任务，与其他度量学习方式不同；本文所用的<strong>embedding </strong>特征提取器<strong>只有卷积层</strong>，<strong>没有全连接层</strong>；也就是没有将一幅图像的特征信息压缩到一个紧凑的<strong>图像级别</strong>的特征表示（特征提取网络将图像特征高度<strong>抽象化</strong>，对<strong>位置不敏感</strong>的向量），因为作者认为图像级别的特征信息会损失很多有<strong>区分性</strong>的特征。</p><h3 id="DN4网络"><a href="#DN4网络" class="headerlink" title="DN4网络"></a>DN4网络</h3><p>全称 <strong>Deep Nearest Neighbor Neural Network</strong>，简称为 <strong>DN4</strong></p><p><strong>embedding module $\psi$​​​</strong>：只包含卷积层，没有全连接层（因为要用到图片中的局部信息，所以不将图片的特征向量打平）</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210921195424034.png" alt="local descriptor示例图"></p><p><strong>image：X</strong></p><script type="math/tex; mode=display">\psi(X)=[x_1,x_2,...,x_m] \in R^{d\times m}  \quad m=h\times w</script><p>这里的 $x_i$​​​​​​ ​就是论文所提出的<strong>local descriptor</strong>（<strong>局部描述子</strong>）；如<strong>上图</strong>所示，是将图片尺寸操作变为<strong>9*9</strong>(<strong>h</strong>=9；<strong>w</strong>=9)，m = <strong>9*9</strong> = 81；上图图片示例中就代表有 <strong>81</strong> 个<strong>局部描述子</strong>。</p><p>本文是先将一张图片先随机裁剪及一些操作后，得到图片的尺寸为<strong>84*84</strong>(<strong>h</strong>=84；<strong>w</strong>=84)； 再经过特征提取模块之后，将图片尺寸变为了<strong>21*21</strong>(<strong>h</strong>=21,<strong>w</strong>=21)；这里将一个 <strong>local descriptor </strong>看做成一张图片的一部分局部信息（因为 <strong>local descriptor</strong> 虽然是一个<strong>像素点</strong>，但是图片是经过缩放的，所以可以看成原图的一个<strong>局部块</strong>，也就是原图中的一部分局部信息）。</p><h3 id="Image-to-Class-module"><a href="#Image-to-Class-module" class="headerlink" title="Image-to-Class module"></a>Image-to-Class module</h3><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210913180804676.png" alt="DN4框架图"></p><p>对于一张 <strong>query image</strong>： $\psi(q)= [x_1,x_2,…,x_m] \in R^{d\times m} $</p><p>对一张 <strong>query image</strong> 中的每个 <strong>loacl descriptor</strong> 在 <strong>support set</strong> 每个<strong>类别</strong>中找到 <strong>k</strong> 近邻个   $\hat{x}_i$​  ，计算 <script type="math/tex">x_i</script>​ 和 $\ \hat{x}_i$​ 的相似度；相当于一张 <strong>query image</strong> 和 一个<strong>类别 c</strong> 要计算 <strong>mk</strong> 个相似度 （一张 <strong>query image</strong> 有 <strong>m</strong> 个 <strong>local descriptor</strong> ，每个<strong>local descriptor</strong> 在当前<strong>类别 c</strong> 中找到 <strong>k</strong> 近邻个   $\hat{x_i}$​ ）</p><p>下面为求相似度的公式（这里的距离度量为<strong>余弦距离</strong>）</p><script type="math/tex; mode=display">cos(x_i,\hat{x_i}^j) = \frac{x_i^T \cdot x_i^T}{||x_i||\cdot ||\hat{x_i}||}    \\\begin{aligned}    \Phi(\psi(q),c) = \sum_{i=1}^m \sum_{j=1}^k cos(x_i,\hat{x}_i^j)  \\     = \sum_{i=1}^m \sum_{j=1}^k \frac{x_i^T \cdot \hat{x}_i^j}{||x_i||\cdot ||\hat{x}_i^j||} \end{aligned}   \\</script><p>本文注重于图像的 <strong>局部特征</strong> 表示，在 <strong>support set</strong> 每个类别（<strong>n ways</strong>）的所有的 <strong>local descriptors</strong> 中找出与 <strong>query image</strong> 中每个 <strong>local descriptor</strong> 最相似的 <strong>k</strong> 个 <strong>local descriptors</strong> ；这样每个 <strong>query image</strong> 的每个 <strong>local descriptor</strong> 对于 <strong>support set</strong> 中当前类别 <strong>c</strong> 有一个相似度分数，将 <strong>query image</strong> 的所有 <strong>local descriptors</strong> 对当前类别 <strong>c</strong> 的分数累加起来，作为<strong>当前</strong> <strong>query image</strong> 对分类为当前类别 <strong>c</strong> 的<strong>分数</strong>；这样每张 <strong>query image</strong> 对于 <strong>support set</strong> 的每个类别也有一个相似度分数，基于此方式对图片进行分类。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇论文提出了 <strong>local descriptor</strong>（<strong>局部描述子</strong>）的概念，<strong>局部描述子</strong>代表的是一张图片中局部区域的特征表示；这个概念在之后的很多论文都有提到，但是可能不被称作为<strong>局部描述子</strong>；本文的 <strong>embedding</strong> 网络结构取消了全连接层，因为需要用到图片的<strong>局部信息</strong>，最后没有将一张图片的特征向量打平；分类准确率相较于<strong>原型网络（Prototypical Nets）</strong>和<strong>匹配网络（Matching Nets）</strong>都有所提升。</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小样本学习 </tag>
            
            <tag> few shot learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础-路由</title>
      <link href="/2021/09/21/vue-lu-you/"/>
      <url>/2021/09/21/vue-lu-you/</url>
      
        <content type="html"><![CDATA[<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><ol><li>理解： 一个路由（<strong>route</strong>）就是一组<strong>映射关系</strong>（<strong>key - value</strong>），多个路由需要路由器（<strong>router</strong>）进行管理。</li><li><strong>前端路由</strong>：<strong>key</strong>是<strong>路径</strong>，<strong>value</strong>是<strong>组件</strong>，用于展示页面内容；当浏览器对应的路径发生改变时，对应的组件就会显示。</li><li><strong>后端路由</strong>：<strong>value</strong> 是 <strong>function</strong> ，用于处理客户端提交的请求；服务器收到一个请求时，根据<strong>请求路径</strong>找到匹配的<strong>函数</strong>来处理请求，返回响应数据。</li></ol><h4 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h4><ol><li><p>安装 <strong>vue-router</strong>（ vue 插件库，专门实现 <strong>SPA</strong> 应用），命令：<code>npm i vue-router</code></p><p><strong>SPA</strong> 应用的理解：</p><ul><li>整个应用只有<strong>一个完整的页面</strong></li><li>点击页面中的导航链接<strong>不会刷新</strong>界面，只会做页面的<strong>局部更新</strong></li><li>数据需要通过 <strong>ajax</strong> 请求获取</li></ul></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入VueRouter</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">//引入Luyou 组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token comment">//创建并暴露router实例对象，去管理一组一组的路由规则</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>routes<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>About<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Home<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现切换（active-class可配置高亮样式）</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 借助router-link实现路由的切换 --&gt;&lt;router-link replace class="list-group-item" active-class="active"  to="/about"&gt;About&lt;/router-link&gt;&lt;router-link replace class="list-group-item" active-class="active"  to="/home"&gt;Home&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>指定展示位置</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 指定组件的呈现位置 --&gt;&lt;router-view&gt;&lt;/router-view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h4><ol><li><strong>路由组件</strong>通常存放在<code>pages</code>文件夹，一<strong>般组件</strong>通常存放在<code>components</code>文件夹。</li><li>通过切换，“<strong>隐藏</strong>”了的<strong>路由组件</strong>，默认是被<strong>销毁</strong>掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<strong><code>$route</code>属性</strong>，里面存储着自己的路由信息。</li><li>整个应用只有一个<strong>router</strong>，可以通过组件的<code>$router</code>属性获取到。</li></ol><h4 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h4><ol><li><p>配置路由规则，使用children配置项：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">routes<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>About<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Home<span class="token punctuation">,</span>children<span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">//通过children配置子级路由</span><span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span> <span class="token comment">//此处一定不要写：/news</span>component<span class="token operator">:</span>News<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token comment">//此处一定不要写：/message</span>component<span class="token operator">:</span>Message<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>跳转（要写完整路径）：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 子组件的路径需要写完整 --&gt;&lt;router-link to="/home/news"&gt;News&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h4><ol><li><p>传递参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 跳转路由并携带参数 模板字符串写法   这里to前面的：一定不能不写--&gt;&lt;router-link :to="`/home/message/detail?id=${m.id}&amp;title=${m.title}`"&gt;{{m.title}}&lt;/router-link&gt;&amp;nbsp;&amp;nbsp;&lt;!-- 跳转路由并携带参数 对象写法   --&gt;&lt;router-link :to="{                  path:'/home/message/detail',                  query:{                      id:m.id,                      title:m.title,                  }                  }"&gt;{{m.title}}&lt;/router-link&gt;&amp;nbsp;&amp;nbsp;&lt;!-- 路由跳转由 to 改为 name 多用于多级路由 --&gt;&lt;router-link :to="{                  name: 'xiangqing',                  query:{                      id:m.id,                      title:m.title,                  }                  }"&gt;{{m.title}}&lt;/router-link&gt;&amp;nbsp;&amp;nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接收参数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"># query接收参数$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h4><ol><li><p>作用：可以<strong>简化路由的跳转</strong>。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>            path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>            component<span class="token operator">:</span>Home<span class="token punctuation">,</span>            children<span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    path<span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span>                    component<span class="token operator">:</span>News<span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    path<span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span>                    component<span class="token operator">:</span>Message<span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">{</span>                            name<span class="token operator">:</span> <span class="token string">'xiangqing'</span><span class="token punctuation">,</span>                            path<span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>                            component<span class="token operator">:</span>Detail<span class="token punctuation">,</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简化跳转：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!--简化前，需要写完整的路径 --&gt;&lt;router-link :to="{                    path:'/home/message/detail',                    query:{                        id:m.id,                        title:m.title,                    }                }"&gt;{{m.title}}&lt;/router-link&gt;&amp;nbsp;&amp;nbsp;&lt;!--简化后，直接通过名字跳转 --&gt;&lt;router-link :to="{                    name: 'xiangqing',                    query:{                        id:m.id,                        title:m.title,                    }                }"&gt;{{m.title}}&lt;/router-link&gt;&amp;nbsp;&amp;nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h4 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h4><ol><li><p>配置路由，<strong>声明接收params参数</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Home<span class="token punctuation">,</span>children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>News<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>component<span class="token operator">:</span>Message<span class="token punctuation">,</span>children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>path<span class="token operator">:</span><span class="token string">'detail/:id/:title'</span><span class="token punctuation">,</span> <span class="token comment">//使用占位符声明接收params参数</span>component<span class="token operator">:</span>Detail<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传递参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;&lt;router-link :to="/home/message/detail/666/你好"&gt;跳转&lt;/router-link&gt;&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;&lt;router-link :to="{name:'xiangqing',params:{    id:666,            title:'你好'}}"&gt;跳转&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>特别注意：</strong>路由携带params参数时，若使用to的对象写法，则<strong>不能使用path配置项</strong>，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h4><p>​    作用：让<strong>路由组件更方便的收到参数</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>path<span class="token operator">:</span><span class="token string">'detail/:id'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Detail<span class="token punctuation">,</span><span class="token comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span><span class="token comment">// props:{a:900}</span><span class="token comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span><span class="token comment">// props:true</span><span class="token comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span> <span class="token function">props</span><span class="token punctuation">(</span><span class="token parameter">$route</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                           <span class="token keyword">return</span> <span class="token punctuation">{</span>id<span class="token operator">:</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span>title<span class="token operator">:</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">}</span>                      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.<router-link>的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h4><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是<strong>追加历史记录</strong>，<code>replace</code>是<strong>替换当前记录</strong>。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h4 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h4><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现<strong>路由跳转</strong>，让<strong>路由跳转更加灵活</strong></p></li><li><p>具体编码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//$router的两个API</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">{</span>id<span class="token operator">:</span>xxx<span class="token punctuation">,</span>title<span class="token operator">:</span>xxx<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">{</span>id<span class="token operator">:</span>xxx<span class="token punctuation">,</span>title<span class="token operator">:</span>xxx<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//前进</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//后退</span><span class="token comment">// go可以传参 前进或者回退多少步</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//可前进也可后退</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="10-缓存路由组件-keep-alive"><a href="#10-缓存路由组件-keep-alive" class="headerlink" title="10.缓存路由组件[keep-alive]"></a>10.缓存路由组件[keep-alive]</h4><ol><li><p>作用：让不展示的<strong>路由组件</strong>保持挂载，不被销毁。</p></li><li><p>具体编码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 这里include绑定的是组件News 缓存一个路由 是组件名--&gt;&lt;&lt;keep-alive include="News"&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/keep-alive&gt;&lt;!-- 缓存多个路由 --&gt;&lt;keep-alive :include="['News','Message']"&gt;    &lt;router-view&gt;&lt;/router-view&gt;&lt;/keep-alive&gt;&lt;!-- 不指定include则是缓存全部 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="11-两个新的生命周期钩子activated和deactivated"><a href="#11-两个新的生命周期钩子activated和deactivated" class="headerlink" title="11.两个新的生命周期钩子activated和deactivated"></a>11.两个新的生命周期钩子activated和deactivated</h4><ol><li>作用：<strong>路由组件所独有的两个钩子</strong>，用于捕获路由组件的<strong>激活状态</strong>。</li><li>具体名字：<ol><li><code>activated</code>  路由组件被激活时触发。</li><li><code>deactivated</code>  路由组件失活时触发。</li></ol></li></ol><h4 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h4><ol><li><p><strong>这里include绑定的是组件News</strong>   作用：对路由进行<strong>权限控制</strong></p></li><li><p>分类：<strong>全局守卫</strong>、<strong>独享守卫</strong>、<strong>组件内守卫</strong></p></li><li><p><strong>全局守卫</strong>:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// beforeEach 全局前置守卫：初始化时执行、每次路由切换前执行</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>from<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//判断当前路由是否需要进行权限控制</span><span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//权限控制的具体规则</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//放行</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span><span class="token comment">// next({name:'guanyu'})</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//放行</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// afterEach 全局后置守卫：初始化时执行、每次路由切换后执行</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'afterEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>from<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title <span class="token comment">//修改网页的title</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'vue_test'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>独享守卫</strong>:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 注意这里独享守卫是 beforeEnter</span><span class="token function">beforeEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEnter'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>from<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//判断当前路由是否需要进行权限控制</span><span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span><span class="token comment">// next({name:'guanyu'})</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>组件内守卫：</strong></p><p><strong>路由规则</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//进入守卫：通过路由规则，进入该组件时被调用</span><span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//离开守卫：通过路由规则，离开该组件时被调用</span><span class="token function">beforeRouteLeave</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 通过路由规则，进入该组件时调用</span><span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'武汉轻工大学'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'无权限查看'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//放行</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 通过路由规则，离开该组件时调用</span>    <span class="token function">beforeRouteLeave</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h4><ol><li><p>对于一个url来说，什么是<strong>hash</strong>值？—— #及其后面的内容就是<strong>hash</strong>值。</p></li><li><p><strong>hash</strong>值不会包含在 HTTP 请求中，即：<strong>hash值不会带给服务器</strong>。</p></li><li><p><strong>hash</strong>模式：（默认）</p><ul><li>地址中永远带着<strong>#</strong>号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ul></li><li><p><strong>history</strong>模式：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"># router 的 index<span class="token punctuation">.</span>js中配置路由器 工作模式（mode） 为 historymode<span class="token operator">:</span> <span class="token string">'history'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>地址干净</strong>，美观 。</li><li><strong>兼容性</strong>和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ul><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 解决 history模式下 刷新后 404问题 借助 connect-history-api-fallbacknpm i connect-history-api-fallback<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-vuex实现任意组件通信</title>
      <link href="/2021/09/18/vue-vuex-shi-xian-ren-yi-zu-jian-tong-xin/"/>
      <url>/2021/09/18/vue-vuex-shi-xian-ren-yi-zu-jian-tong-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="vuex-实现组件通信"><a href="#vuex-实现组件通信" class="headerlink" title="vuex 实现组件通信"></a>vuex 实现组件通信</h1><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><p>在Vue中实现集中式<strong>状态（数据）</strong>管理的一个Vue插件，对vue应用中多个组件的共享状态进行<strong>集中式</strong>的管理（读/写），也是一种<strong>组件间通信的方式</strong>，且适用于<strong>任意组件间通信</strong>。</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210918150248391.png" alt="vuex实现组件共享数据"></p><h4 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h4><p><strong>共享</strong></p><ol><li>多个组件依赖于统一状态</li><li>来自不同组件的行为需要变更为统一状态</li></ol><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210918150335421.png" alt="vuex流程图"></p><p><strong>store</strong>管理</p><ol><li>State</li><li>Actions</li><li>Mutations</li></ol><h4 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h4><p>首先是先安装<strong>vuex插件</strong></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm  i vuex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>创建文件：<code>src/store/index.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// vuex的store</span><span class="token comment">// 引入vue</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 引入vuex插件</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">// 使用插件Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">// actions 响应组件中的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 用于操作数据</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 用于存储数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    actions<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    state<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">// 创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>  store<span class="token operator">:</span> store<span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">//全局总线</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h4><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//引用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">//响应组件中加的动作</span><span class="token function">jia</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// console.log('actions中的jia被调用了',miniStore,value)</span>context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">//执行加</span><span class="token constant">JIA</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// console.log('mutations中的JIA被调用了',state,value)</span>state<span class="token punctuation">.</span>sum <span class="token operator">+=</span> value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//初始化数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>   sum<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>actions<span class="token punctuation">,</span>mutations<span class="token punctuation">,</span>state<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch('action中的方法名',数据)</code> 或 <code>$store.commit('mutations中的方法名',数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h4 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h4><ol><li><p>概念：当<strong>state</strong>中的<strong>数据</strong>需要经过加工后再使用时，可以使用<strong>getters</strong>加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span>getters<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h4 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h4><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为<strong>计算属性</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span>     <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sum<span class="token operator">:</span><span class="token string">'sum'</span><span class="token punctuation">,</span>school<span class="token operator">:</span><span class="token string">'school'</span><span class="token punctuation">,</span>subject<span class="token operator">:</span><span class="token string">'subject'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为<strong>计算属性</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bigSum<span class="token operator">:</span><span class="token string">'bigSum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>incrementOdd<span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">//靠mapActions生成：increment、decrement（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>increment<span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中<strong>绑定事件时传递好参数</strong>，否则参数是事件对象。</p></blockquote><h4 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h4><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  state<span class="token operator">:</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  state<span class="token operator">:</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token operator">:</span> <span class="token punctuation">{</span>    countAbout<span class="token punctuation">,</span>    personAbout  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取state数据：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>personAbout<span class="token punctuation">.</span>list<span class="token comment">//方式二：借助mapState读取：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取<strong>getters</strong>数据：(这里注意下这个)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'personAbout/firstPersonName'</span><span class="token punctuation">]</span><span class="token comment">//方式二：借助mapGetters读取：</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用dispatch</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapActions：</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>incrementOdd<span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用commit</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapMutations：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>increment<span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-使用脚手架</title>
      <link href="/2021/09/17/vue-shi-yong-jiao-shou-jia/"/>
      <url>/2021/09/17/vue-shi-yong-jiao-shou-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Vue脚手架"><a href="#使用Vue脚手架" class="headerlink" title="使用Vue脚手架"></a>使用Vue脚手架</h1><ol><li>Vue脚手架是Vue官方提供的标准化开发工具（开发平台）</li><li>最新的版本为4.x</li></ol><p><strong>设置npm淘宝镜像 避免下载缓慢</strong>  这里是设置为持久使用</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm config set registry “’https://registry.npm.taobao.org‘”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置后可通过下面方式来验证是否成功(PS:<strong>这里可能会设置失败，用下面指令查看会出现undefined，建议重新打开cmd命令行在试试</strong>)</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210914092035848.png" alt="设置npm淘宝镜像"></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm config get registernpm info express<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>第一步</strong>（<strong>仅第一次执行</strong>）：全局安装@vue/cli</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 全局安装cli脚手架npm install -g @vue/cli# 版本太低 更新脚手架npm update -g @vue/cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210914092124623.png" alt="全局安装cli脚手架"></p><p><strong>第二步</strong>：切换到你想要创建项目的目录，使用下面的命令创建项目</p><p><strong>下面是创建一个vue项目时的预设</strong></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210914092159816.png" alt="创建vue项目的预设"></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># xxx为项目名称 记得不要跟一些关键字重名vue create xxxx   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210914092225994.png" alt="创建vue项目"></p><p><strong>第三步</strong>：启动项目</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210914092243512.png" alt="启动"></p><p>最后’<strong>ctrl+c</strong>‘停掉</p><p><img src="E:/typora/vue/01 vue基础.assets/image-20210823192022960.png" alt="vue相关了解"></p><p><strong>关于不同版本的Vue</strong>：<br>            1.vue.js与vue.runtime.xxx.js的区别：<br>                (1).vue.js是完整版的Vue，包含：<strong>核心功能</strong>+<strong>模板解析器</strong>。<br>                (2).vue.runtime.xxx.js是运行版的Vue，只包含：<strong>核心功能</strong>；没有模板解析器。</p><p>​    2.因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用<br>​                render函数接收到的createElement函数去指定具体内容。</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210914153630063.png" alt="vue cli运行原理"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-插槽</title>
      <link href="/2021/09/17/vue-cha-cao/"/>
      <url>/2021/09/17/vue-cha-cao/</url>
      
        <content type="html"><![CDATA[<h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：<strong>默认插槽</strong>、<strong>具名插槽</strong>、<strong>作用域插槽</strong></p></li><li><p>使用方式：</p><h4 id="默认插槽："><a href="#默认插槽：" class="headerlink" title="默认插槽："></a><strong>默认插槽</strong>：</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//父组件中：&lt;Category&gt;    &lt;div&gt;html结构1&lt;/div&gt;&lt;/Category&gt;//子组件中：&lt;template&gt;&lt;div&gt;        &lt;!-- 定义插槽 --&gt;        &lt;slot&gt;插槽默认内容...&lt;/slot&gt;    &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具名插槽："><a href="#具名插槽：" class="headerlink" title="具名插槽："></a><strong>具名插槽</strong>：</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//父组件中：&lt;Category&gt;    &lt;template v-slot="center"&gt;&lt;div&gt;html结构1&lt;/div&gt;    &lt;/template&gt;    &lt;template v-slot:footer&gt;&lt;div&gt;html结构2&lt;/div&gt;    &lt;/template&gt;&lt;/Category&gt;//子组件中：&lt;template&gt;&lt;div&gt;    &lt;!-- 定义插槽 --&gt;    &lt;slot name="center"&gt;插槽默认内容...&lt;/slot&gt;    &lt;slot name="footer"&gt;插槽默认内容...&lt;/slot&gt;    &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="作用域插槽："><a href="#作用域插槽：" class="headerlink" title="作用域插槽："></a><strong>作用域插槽</strong>：</h4><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（<strong>games</strong>数据在<strong>Category组件</strong>中，但使用数据所遍历出来的结构由<strong>App组件</strong>决定）</p></li></ol>   <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;      &lt;div class="container"&gt;            &lt;Category title="游戏" &gt;          &lt;template slot-scope="gg"&gt;              &lt;ul&gt;                &lt;li v-for="(item,index) in gg.games" :key="index"&gt;{{item}}&lt;/li&gt;              &lt;/ul&gt;              &lt;/template&gt;      &lt;/Category&gt;      &lt;Category title="游戏" &gt;        &lt;!-- 结构赋值写法 --&gt;          &lt;template slot-scope="{games}"&gt;              &lt;ol&gt;                &lt;li v-for="(item,index) in games" :key="index"&gt;{{item}}&lt;/li&gt;              &lt;/ol&gt;              &lt;/template&gt;      &lt;/Category&gt;      &lt;Category title="游戏" &gt;          &lt;template slot-scope="gg"&gt;                           &lt;h4 v-for="(item,index) in gg.games" :key="index"&gt;{{item}}&lt;/h4&gt;                           &lt;/template&gt;      &lt;/Category&gt;         &lt;/div&gt;      &lt;/template&gt;&lt;script&gt;  import Category from './components/Category.vue'      export default {    name: 'App',    components: {Category},      }&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>   <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="category"&gt;      &lt;h3&gt;{{title}}分类&lt;/h3&gt;            &lt;!-- 定义一个插槽 --&gt;      &lt;slot :games="games"&gt;&lt;/slot&gt;        &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    export default {        name:'Category',        props:['title'],        data() {            return {                games: ['dnf','qqspeed','cf','cs'],            }        },    }&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-组件通信（任意组件）</title>
      <link href="/2021/09/17/vue-zu-jian-tong-xin-ren-yi-zu-jian/"/>
      <url>/2021/09/17/vue-zu-jian-tong-xin-ren-yi-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="组件通信（任意组件）"><a href="#组件通信（任意组件）" class="headerlink" title="组件通信（任意组件）"></a>组件通信（任意组件）</h1><h3 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h3><p><strong>vue3</strong>需要安装第三库<strong>mitt</strong>，因为<strong>Vue3</strong>从实例中移除了 <strong>$on、$off</strong> 和 <strong>$once</strong> 方法，所以我们如果希望继续使用全局事件总线，要通过第三方的库.。</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 安装第三方库mittnpm i mitt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面这部分来自于尚硅谷，应该是<strong>vue2</strong></p><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">//安装全局事件总线，$bus就是当前应用的vm</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给<strong>$bus</strong>绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'checkTodo'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkTodo<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'deleteTodo'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteTodo<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供数据：<code>this.$bus.$emit('xxxx',数据)</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 切换勾选状态</span>    <span class="token function">handleCheck</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'checkTodo'</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 删除一个todo</span>    <span class="token function">handleDelete</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'are you sure?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'deleteTodo'</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><ol><li><p>最好在<strong>beforeDestroy</strong>钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'checkTodo'</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'deleteTodo'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h3><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from 'pubsub-js'</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span> <span class="token comment">//订阅消息</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供数据：<code>pubsub.publish('xxx',数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在<strong>下一次</strong> <strong>DOM 更新结束后执行其指定的回调</strong>。</li><li>什么时候用：当<strong>改变数据</strong>后，要<strong>基于更新后的新DOM进行某些操作</strong>时，要在<strong>nextTick</strong>所指定的回调函数中执行。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-脚手架配置代理</title>
      <link href="/2021/09/17/vue-jiao-shou-jia-pei-zhi-dai-li/"/>
      <url>/2021/09/17/vue-jiao-shou-jia-pei-zhi-dai-li/</url>
      
        <content type="html"><![CDATA[<h1 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h1><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>​    在vue.config.js中添加如下配置：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">devServer<span class="token operator">:</span><span class="token punctuation">{</span>  proxy<span class="token operator">:</span><span class="token string">"http://localhost:5000"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（<strong>8080</strong>）即可。</li><li>缺点：不能配置多个代理，<strong>不能</strong>灵活的控制请求<strong>是否走代理</strong>。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>​    编写vue.config.js配置具体代理规则：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>devServer<span class="token operator">:</span> <span class="token punctuation">{</span>      proxy<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api1'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// 匹配所有以 '/api1'开头的请求路径</span>        target<span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span><span class="token comment">// 代理目标的基础路径</span>        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'^/api1'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">'/api2'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// 匹配所有以 '/api2'开头的请求路径</span>        target<span class="token operator">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span><span class="token comment">// 代理目标的基础路径</span>        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'^/api2'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080   changeOrigin默认值为true  这个属性就是伪装请求头*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-组件通信（子传父）</title>
      <link href="/2021/09/17/vue-zu-jian-tong-xin-zi-chuan-fu/"/>
      <url>/2021/09/17/vue-zu-jian-tong-xin-zi-chuan-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="组件通信（子传父）"><a href="#组件通信（子传父）" class="headerlink" title="组件通信（子传父）"></a>组件通信（子传父）</h1><h3 id="ref属性和-resfs"><a href="#ref属性和-resfs" class="headerlink" title="ref属性和$resfs"></a>ref属性和$resfs</h3><ol><li>被用来给元素或子组件<strong>注册引用信息</strong>（<strong>id的替代者</strong>）</li><li>应用在<strong>html标签</strong>上获取的是<strong>真实DOM元素</strong>，应用在<strong>组件标签</strong>上是<strong>组件实例对象（vc）</strong></li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref="xxx"&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref="xxx"&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;App component&lt;/h1&gt;    &lt;button ref="btn" @click="focusD"&gt;点我获取焦点&lt;/button&gt;    &lt;!-- 通过this.$refs.keyword 获取到的是真实的 DOM 节点 --&gt;    &lt;input type="text" name="" id="" ref="keyword"&gt;    &lt;!-- 通过this.$refs.hello 获取到的是 组件实例对象 --&gt;    &lt;hello-world ref="hello"/&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  // 引入HelloWorld组件  import HelloWorld from './components/HelloWorld.vue'  export default {      name:'App',      // 注册组件 局部注册      components: {HelloWorld},      data() {        return {          keyword: ''        }      },      methods: {        focusD(){          // 点击获取焦点          this.$refs.keyword.focus()          // 打印keyword的值          console.log(this.$refs.keyword.value);          // 打印 组件实例对象          console.log(this.$refs.hello);        }      },        }&lt;/script&gt;&lt;style scoped&gt;  &lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h3><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name="xxx"/&gt;</code></p><p>​    这样直接传的就是<strong>String</strong>类型的数据</p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:['name']</code></p></li><li><p>第二种方式（限制类型）：<code>props:{name:String}</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// props对象</span>props<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token punctuation">{</span>type<span class="token operator">:</span>String<span class="token punctuation">,</span> <span class="token comment">// 传递数据类型</span>required<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 设置必须传递数据 </span><span class="token keyword">default</span><span class="token operator">:</span><span class="token string">'老王'</span> <span class="token comment">// 默认值</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>备注：<strong>props是只读的</strong>，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制<strong>props的内容到data中一份，然后去修改data中的数据</strong>。</p><p>如果传的是对象</p></blockquote></li></ol><h3 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h3><ol><li>作用：让样式在<strong>局部生效</strong>，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><p>如果给当前组件的 <strong>style</strong> 节点添加了 scoped 属性，则当前组件的样式对其子组件是不生效的。如果想让<strong>某些样式对子组件</strong>生效，可以使用 <strong>/deep/</strong> 深度选择器</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 覆盖第三方组件样式/deep/ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h3><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h3 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h3><p>1.组件化编码流程:</p><p>​        (1).拆分静态组件:组件要按照功能点拆分，命名不要与html元素冲突。</p><p>​        (2).实现动态组件:考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用:<br>​                        1).一个组件在用:放在组件自身即可。<br>​                        2).一些组件在用:放在他们共同的父组件上(状态提升)。</p><p>​        (3).实现交互:从绑定事件开始。<br>​        </p><p>2.props适用于:<br>                (1)<strong>父组件</strong>==&gt; <strong>子组件</strong>通信<br>                (2)<strong>子组件</strong>==&gt;<strong>父组件</strong>通信（要求<strong>父先给子一个函数</strong>)</p><p>3.使用<strong>v-model</strong>时要切记: <strong>v-model</strong> 绑定的值不能是 <strong>props</strong> 传过来的值，因为 <strong>props</strong> 是不可以修改的!</p><p>4.<strong>props</strong> 传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;     &lt;div id="root"&gt;        &lt;div class="todo-container"&gt;            &lt;div class="todo-wrap"&gt;                     &lt;MyHeader :addTodo="addTodo"/&gt;            &lt;MyList                 :todos="todos"                :checkTodo="checkTodo"                :deleteTodo="deleteTodo"            /&gt;                    &lt;MyFooter :todos="todos" :checkAllTodo="checkAllTodo" :clearDoneAllTodos="clearDoneAllTodos"/&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;       &lt;/template&gt;&lt;script&gt;        // 引入组件    import MyHeader from './components/MyHeader.vue'    import MyFooter from './components/MyFooter.vue'    import MyList from './components/MyList.vue'        export default {        name:"App",        // 注册组件        components:{MyHeader,MyFooter,MyList},         data(){            return {                // 数据放在app里面  数组里面包对象                todos:                [                    {id:'001',title:'smoking',done:true},                    {id:'002',title:'drinking',done:false},                    {id:'003',title:'making a hair',done:false},                    {id:'004',title:'coding',done:true},                    {id:'005',title:'running',done:true},                    {id:'006',title:'hhhh',done:false}                ]            }        },        methods: {            // 添加一个 todo            addTodo(todoObj){                this.todos.unshift(todoObj)            },            // 勾选或取消勾选一个 todo            checkTodo(id){                // 循环遍历 todos 中的所有 todo                this.todos.forEach((todo)=&gt;{                    // 如果当前 todo 的 id 与传进来的 id 相等  则取反                    if(todo.id === id) todo.done = !todo.done                })            },            // 删除一个todo            deleteTodo(id){                // 这里用的是 filter() 过滤掉 不等于传入的id 的 todo 对象                this.todos = this.todos.filter((todo)=&gt;{                    return todo.id !== id                })            },            // 全选 全不选            checkAllTodo(value){                this.todos.forEach((todo)=&gt;{                    todo.done = value                })            },            // 清除所有已完成            clearDoneAllTodos(){                this.todos = this.todos.filter((todo)=&gt;{                    return !todo.done                })            },        },            }&lt;/script&gt;&lt;style &gt;    /*base*/    body {    background: #fff;    }    .btn {    display: inline-block;    padding: 4px 12px;    margin-bottom: 0;    font-size: 14px;    line-height: 20px;    text-align: center;    vertical-align: middle;    cursor: pointer;    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);    border-radius: 4px;    }    .btn-danger {    color: #fff;    background-color: #da4f49;    border: 1px solid #bd362f;    }    .btn-danger:hover {    color: #fff;    background-color: #bd362f;    }    .btn:focus {    outline: none;    }    .todo-container {    width: 600px;    margin: 0 auto;    }    .todo-container .todo-wrap {    padding: 10px;    border: 1px solid #ddd;    border-radius: 5px;    }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;       &lt;div class="todo-header"&gt;        &lt;input             type="text"             placeholder="请输入你的任务名称，按回车键确认"             v-model="title"             @keyup.enter="add"/&gt;    &lt;/div&gt;           &lt;/template&gt;&lt;script&gt;        // 引入nanoid    import {nanoid} from 'nanoid'    export default {        name:"MyHeader",        // 声明接收父组件 APP 的 addTodo        props: ['addTodo'],        data() {            return {                title: ''            }        },        methods: {            // 这里注意 add 和 addTodo不能重名            add(){                // console.log(this.title);                const todoObj = {id:nanoid(),title:this.title,done:false}                // console.log(todoObj);                this.addTodo(todoObj)                // 清空title                this.title = ''            }        },    }&lt;/script&gt;&lt;style scoped&gt;     /*header*/    .todo-header input {    width: 560px;    height: 28px;    font-size: 14px;    border: 1px solid #ccc;    border-radius: 4px;    padding: 4px 7px;    }    .todo-header input:focus {    outline: none;    border-color: rgba(82, 168, 236, 0.8);    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);    }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;div class="todo-footer" v-show="total"&gt;        &lt;label&gt;                  &lt;!-- &lt;input type="checkbox" :checked="isAll" @change="checkAll"/&gt; --&gt;            &lt;!-- 这里还可以通过 v-model 直接双向绑定当前勾选的状态 --&gt;            &lt;input type="checkbox" v-model="isAll"/&gt;        &lt;/label&gt;        &lt;span&gt;            &lt;span&gt;已完成{{doneTotal}}&lt;/span&gt; / 全部{{total}}        &lt;/span&gt;        &lt;button @click="clearDoneAll"&gt;清除已完成任务&lt;/button&gt;    &lt;/div&gt;    &lt;!-- &lt;div&gt;&lt;/div&gt; --&gt;&lt;/template&gt;&lt;script&gt;            export default {        name:"MyFooter",        props: ['todos','checkAllTodo','clearDoneAllTodos'],        computed: {            // 已勾选的            doneTotal(){                // 这里用的是 reduce 函数                // const x = this.todos.reduce((pre,current)=&gt;{                //     return pre + (current.done? 1:0)                // },0)                // return x                return this.todos.reduce((pre,current) =&gt; pre + (current.done?1:0),0)            },            // 全部todos            total(){                return this.todos.length            },            // 全选的计算属性由 前两个计算属性计算得到            // isAll(){            //     return this.doneTotal === this.total &amp;&amp; this.total &gt; 0            // }            // 配合 v-model 双向绑定  isAll需要写对象写法  因为涉及到数据的修改            isAll:{                get(){                    return this.doneTotal === this.total &amp;&amp; this.total &gt; 0                },                set(value){                    this.checkAllTodo(value)                }            }        },        methods: {            // checkAll(e){            //     // 通过事件 e.target.checked 得到是否勾选            //     this.checkAllTodo(e.target.checked)            //     console.log(e.target.checked);            // },            // 清除已完成            clearDoneAll(){                if(confirm('确认清除已完成的任务？')){                    this.clearDoneAllTodos()                }            }        },    }&lt;/script&gt;&lt;style scoped&gt;    /*footer*/    .todo-footer {    height: 40px;    line-height: 40px;    padding-left: 6px;    margin-top: 5px;    }    .todo-footer label {    display: inline-block;    margin-right: 20px;    cursor: pointer;    }    .todo-footer label input {    position: relative;    top: -1px;    vertical-align: middle;    margin-right: 5px;    }    .todo-footer button {    float: right;    margin-top: 5px;    }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;     &lt;ul class="todo-main"&gt;        &lt;MyItem             v-for="todoObj in todos"             :key="todoObj.id"            :todo="todoObj"            :checkTodo="checkTodo"            :deleteTodo="deleteTodo"        /&gt;               &lt;/ul&gt;       &lt;/template&gt;&lt;script&gt;    import MyItem from './MyItem.vue'    export default {        name:"MyList",        components:{MyItem},        props: ['todos','checkTodo','deleteTodo']    }&lt;/script&gt;&lt;style scoped&gt;    /*main*/    .todo-main {    margin-left: 0px;    border: 1px solid #ddd;    border-radius: 2px;    padding: 0px;    }    .todo-empty {    height: 40px;    line-height: 40px;    border: 1px solid #ddd;    border-radius: 2px;    padding-left: 5px;    margin-top: 10px;    }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;li&gt;        &lt;label&gt;            &lt;input                 type="checkbox"                 :checked="todo.done"                 @change="handleCheck(todo.id)"            /&gt;            &lt;span&gt;{{todo.title}}&lt;/span&gt;        &lt;/label&gt;        &lt;button class="btn btn-danger"  @click="handleDelete(todo.id)"&gt;删除&lt;/button&gt;    &lt;/li&gt;&lt;/template&gt;&lt;script&gt;        export default {        name:"MyItem",        // 声明接收todo对象        props: ['todo','checkTodo','deleteTodo'],        methods: {            handleCheck(id){                this.checkTodo(id)            },            handleDelete(id){                if(confirm('确认删除吗？')){                    // console.log(id);                    this.deleteTodo(id)                }            },        }    }&lt;/script&gt;&lt;style scoped&gt;    /*item*/    li {    list-style: none;    height: 36px;    line-height: 36px;    padding: 0 5px;    border-bottom: 1px solid #ddd;    }    li label {    float: left;    cursor: pointer;    }    li label li input {    vertical-align: middle;    margin-right: 6px;    position: relative;    top: -1px;    }    li button {    float: right;    display: none;    margin-top: 3px;    }    li:before {    content: initial;    }    li:last-child {    border-bottom: none;    }    li:hover {        background-color: rgb(196, 195, 195);    }    li:hover button {        display: block;    }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h3><ol><li><p>存储内容大小一般支持<strong>5MB</strong>左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 <strong>Window.sessionStorage</strong> 和 <strong>Window.localStorage</strong> 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem('key', 'value');</code></p><pre><code>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem('person');</code></p><p>​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem('key');</code></p><p>​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code>xxxxxStorage.clear()</code></p><p>​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li><strong>SessionStorage</strong> 存储的内容会<strong>随着浏览器窗口关闭而消失</strong>。</li><li><strong>LocalStorage</strong> 存储的内容，需要<strong>手动清除才会消失</strong>。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么 <strong>getItem</strong> 的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h3 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h3><ol><li><p>一种<strong>组件间通信</strong>的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210914200032913.png" alt="自定义事件实现子传父"></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p><strong>绑定</strong>自定义事件：</p><ol><li><p>第一种方式，在<strong>父组件</strong>中：<code>&lt;Demo @atguigu="test"/&gt;</code>  或 <code>&lt;Demo v-on:atguigu="test"/&gt;</code></p></li><li><p>第二种方式，在<strong>父组件</strong>中：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>Demo ref<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'atguigu'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若想让自定义事件只能<strong>触发一次</strong>，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p><strong>触发</strong>自定义事件：<code>this.$emit('atguigu',数据)</code>        </p></li><li><p><strong>解绑</strong>自定义事件<code>this.$off('atguigu')</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on('atguigu',回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;     &lt;div class="app"&gt;        &lt;h1&gt;{{name}}&lt;/h1&gt;        &lt;!-- 给school组件传一个 props 配置项 getSchoolName --&gt;        &lt;School :getSchoolName="getSchoolName"/&gt;        &lt;!-- 给Student组件绑定一个自定义事件 子传父  --&gt;        &lt;!-- &lt;Student @zdy="getStudentName"/&gt; --&gt;        &lt;!-- ref绑定自定义事件 --&gt;        &lt;Student ref="student"/&gt;    &lt;/div&gt;       &lt;/template&gt;&lt;script&gt;        // 引入组件    import School from './components/School.vue'    import Student from './components/Student.vue'    export default {        name:"App",        // 注册组件        components:{School,Student},         data(){            return {                name:'APP zujian',            }        },        methods: {            getSchoolName(name){                console.log('收到了学校姓名：',name);            },            getStudentName(name,...params){                console.log('收到了学生姓名：',name,params);            }        },        // 这样写可以更灵活        mounted() {            // setTimeout(()=&gt;{            //     // 挂载完成 绑定自定义事件  注意这里调用方法  得用this            //                 // },3000)            // this.$refs.student.$on('zdy',this.getStudentName)            this.$refs.student.$once('zdy',this.getStudentName)        },                    }&lt;/script&gt;&lt;style &gt;   .app{       background-color: pink;       width: 100%;       height: 600px;   }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="stu"&gt;     &lt;h3&gt;学生姓名：{{studentname}}&lt;/h3&gt;     &lt;h2&gt;{{num}}&lt;/h2&gt;     &lt;button @click="num++"&gt;num++&lt;/button&gt;     &lt;button @click="sendStudentName"&gt;点击向app传递学生姓名&lt;/button&gt;     &lt;button @click="unbind"&gt;解绑自定义事件&lt;/button&gt;     &lt;button @click="dead"&gt;销毁组件实例&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export default {      name:'Student',      data() {          return {              studentname: 'vans',              num: 0          }      },      methods: {          sendStudentName(){            //  触发定义的 自定义事件               // this.$emit('zdy',this.studentname)            // 这里可以传递多个参数            this.$emit('zdy',this.studentname,555,666,444)            this.$emit('zdy2')          },          // 解绑自定义事件          unbind(){            // 解绑一个自定义事件            // this.$off('zdy')            // 解绑多个自定义事件            this.$off(['zdy','zdy2'])          },          // 销毁组件实例          dead(){            this.$destroy()          }      },  }&lt;/script&gt;&lt;style scoped&gt;    .stu{        background-color: gray;    }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件笔记</title>
      <link href="/2021/09/14/vue-zu-jian-bi-ji/"/>
      <url>/2021/09/14/vue-zu-jian-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue组件-笔记"><a href="#Vue组件-笔记" class="headerlink" title="Vue组件-笔记"></a>Vue组件-笔记</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><div class="table-container"><table><thead><tr><th>Vue中使用组件的三大步骤：</th></tr></thead><tbody><tr><td>一、定义组件(创建组件)</td></tr><tr><td>二、注册组件</td></tr><tr><td>三、使用组件(写组件标签)</td></tr><tr><td></td></tr><tr><td>一、如何定义一个组件？</td></tr><tr><td>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；</td></tr><tr><td>区别如下：</td></tr><tr><td>1.el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</td></tr><tr><td>2.data必须写成函数，为什么？ ———— 避免组件被复用时，<strong>数据存在引用关系</strong>。</td></tr><tr><td>备注：使用<strong>template</strong>可以配置<strong>组件结构</strong>。</td></tr><tr><td></td></tr><tr><td>二、如何注册组件？</td></tr><tr><td>1.局部注册：靠new Vue的时候传入components选项</td></tr><tr><td>2.全局注册：靠Vue.component(‘组件名’,组件)</td></tr><tr><td></td></tr><tr><td>三、编写组件标签：</td></tr><tr><td><school></school></td></tr></tbody></table></div><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>非单文件组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 使用多个组件必须用双闭合标签 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hello</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Hello</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>School</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>School</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 关闭生产提示</span>    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTips <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">// vue原型上追加一个属性 hhh</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hhh <span class="token operator">=</span> <span class="token number">555</span>     <span class="token comment">// 创建一个hello组件 继承</span>    <span class="token keyword">const</span> Hello <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h2&gt;hello&lt;/h2&gt;</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//  1.创建school组件</span>    <span class="token keyword">const</span> School <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment">// 基本html样式结构用template写 使用模板字符串写 </span>        template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            &lt;div&gt;            &lt;h2&gt;学校名称：{{schoolName}}&lt;/h2&gt;            &lt;h2&gt;学校地址：{{address}}&lt;/h2&gt;            &lt;button @click="showName"&gt;点我弹出学校名&lt;/button&gt;            &lt;/div&gt;            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token comment">//  非单文件组件定义时 不写el配置项 数据函数形式写 不能用对象形式 </span>        <span class="token comment">//  这里用函数是每次调用函数都是一个新的值  如果是对象的话 一改全改 </span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                schoolName<span class="token operator">:</span> <span class="token string">'武汉大学'</span><span class="token punctuation">,</span>                address<span class="token operator">:</span> <span class="token string">'珞珈山'</span>            <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>schoolName<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token comment">// 全局注册一个组件 第一个参数为组件名 第二个参数为组件</span>    <span class="token comment">// Vue.component('School',school)</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>        <span class="token comment">// 局部注册组件  一般都是局部注册</span>        components<span class="token operator">:</span> <span class="token punctuation">{</span>            Hello<span class="token punctuation">,</span>            School<span class="token punctuation">,</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 创建vue实例对象</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// el指定当前vue为哪个容器服务 也就是挂载的对象</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    <span class="token comment">// data中用于存储数据，数据供el指定的容器去使用，暂时写成一个对象</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'vanous'</span><span class="token punctuation">,</span>        address<span class="token operator">:</span> <span class="token string">'武汉'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 2.注册组件 局部注册</span>    components<span class="token operator">:</span><span class="token punctuation">{</span>        school<span class="token punctuation">,</span>        student<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.创建hello组件</span><span class="token keyword">const</span> hello <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h2&gt;你好,尊敬的：{{name}}&lt;/h2&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token operator">:</span><span class="token string">'vanous'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 注册全局组件hello</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span>hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>组件的几个注意点：</th></tr></thead><tbody><tr><td>1.关于组件名:</td></tr><tr><td>一个单词组成：</td></tr><tr><td>第一种写法(首字母小写)：school</td></tr><tr><td>第二种写法(首字母大写)：School</td></tr><tr><td>多个单词组成：</td></tr><tr><td>第一种写法(kebab-case命名)：my-school</td></tr><tr><td>第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</td></tr><tr><td>备注：</td></tr><tr><td>(1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</td></tr><tr><td>(2).可以使用name配置项指定组件在开发者工具中呈现的名字。</td></tr><tr><td></td></tr><tr><td>2.关于组件标签:</td></tr><tr><td>第一种写法：<school></school></td></tr><tr><td>第二种写法：<school></school></td></tr><tr><td>备注：不用使用脚手架时，<school>会导致后续组件不能渲染。</school></td></tr><tr><td></td></tr><tr><td>3.一个简写方式：</td></tr><tr><td>const school = Vue.extend(options) 可简写为：<strong>const school = options</strong></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>关于VueComponent：</th></tr></thead><tbody><tr><td>1.school组件本质是一个名为<strong>VueComponent的构造函数</strong>，且不是程序员定义的，是Vue.extend生成的。</td></tr><tr><td></td></tr><tr><td>2.我们只需要写<school>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，</school></td></tr><tr><td>即Vue帮我们执行的：new VueComponent(options)。</td></tr><tr><td></td></tr><tr><td>3.特别注意：每次调用Vue.extend，返回的都是一个<strong>全新的VueComponent</strong>！！！！</td></tr><tr><td></td></tr><tr><td>4.关于this指向：</td></tr><tr><td>(1).<strong>组件配置</strong>中：</td></tr><tr><td>data函数、methods中的函数、watch中的函数、computed中的函数 它们的<strong>this</strong>均是【<strong>VueComponent实例对象</strong>】。</td></tr><tr><td>(2).new Vue(options)配置中：</td></tr><tr><td>data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【<strong>Vue实例对象</strong>】。</td></tr><tr><td></td></tr><tr><td>5.VueComponent的实例对象，以后简称vc（也可称之为：<strong>组件实例对象</strong>）。</td></tr><tr><td>Vue的实例对象，以后简称vm。</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础笔记(三)</title>
      <link href="/2021/09/13/vue-ji-chu-bi-ji-san/"/>
      <url>/2021/09/13/vue-ji-chu-bi-ji-san/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基础-相关笔记（3）"><a href="#Vue基础-相关笔记（3）" class="headerlink" title="Vue基础 相关笔记（3）"></a>Vue基础 相关笔记（3）</h1><h3 id="1-12列表渲染"><a href="#1-12列表渲染" class="headerlink" title="1.12列表渲染"></a>1.12列表渲染</h3><div class="table-container"><table><thead><tr><th><strong>v-for</strong>指令:</th></tr></thead><tbody><tr><td>1.用于展示列表数据</td></tr><tr><td>2.语法：<strong>v-for=”(item, index) in xxx” :key=”yyy”</strong></td></tr><tr><td>3.可遍历：<strong>数组</strong>、<strong>对象</strong>、<strong>字符串</strong>（用的很少）、<strong>指定次数</strong>（用的很少）</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>人员列表（遍历数组）<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(p,index) in persons"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span>name<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span>age<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>汽车信息（遍历对象）<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(value,index) in car"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">:</span>  <span class="token punctuation">{</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>测试（遍历字符串）<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(value,index) in char"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">:</span>  <span class="token punctuation">{</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>测试（遍历指定次数）<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(value,index) in 5"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">:</span>  <span class="token punctuation">{</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>面试题：react、vue中的key有什么作用？（key的内部原理）</th></tr></thead><tbody><tr><td></td></tr><tr><td>1. 虚拟DOM中key的作用：</td></tr><tr><td>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】,</td></tr><tr><td>随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</td></tr><tr><td></td></tr><tr><td>2.对比规则：</td></tr><tr><td>(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</td></tr><tr><td>①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</td></tr><tr><td>②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</td></tr><tr><td></td></tr><tr><td>(2).旧虚拟DOM中未找到与新虚拟DOM相同的key</td></tr><tr><td>创建新的真实DOM，随后渲染到到页面。</td></tr><tr><td></td></tr><tr><td>3. 用index作为key可能会引发的问题：</td></tr><tr><td>1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</td></tr><tr><td>会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</td></tr><tr><td></td></tr><tr><td>2. 如果结构中还包含输入类的DOM：</td></tr><tr><td>会产生错误DOM更新 ==&gt; 界面有问题。</td></tr><tr><td></td></tr><tr><td>4. 开发中如何选择key?:</td></tr><tr><td>1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</td></tr><tr><td>2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，</td></tr><tr><td>使用index作为key是没有问题的。</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 用watch写法实现</span>watch<span class="token operator">:</span><span class="token punctuation">{</span>    keyWord<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// 空字符串调用 </span>        immediate<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// console.log('被修改了',val);                       </span>            <span class="token keyword">this</span><span class="token punctuation">.</span>filPersons <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>persons<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> p<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// computed写法实现  不改变原数据</span>computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">filPersons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 关键词过滤</span>        <span class="token keyword">const</span> arr <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>persons<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> p<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyWord<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// 年龄排序</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sortType<span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span>p2</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sortType <span class="token operator">===</span> <span class="token number">1</span><span class="token operator">?</span> p2<span class="token punctuation">.</span>age <span class="token operator">-</span> p1<span class="token punctuation">.</span>age <span class="token operator">:</span> p1<span class="token punctuation">.</span>age <span class="token operator">-</span> p2<span class="token punctuation">.</span>age            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>Vue监视数据的原理：</th></tr></thead><tbody><tr><td>1. vue会监视data中所有层次的数据。</td></tr><tr><td></td></tr><tr><td>2. 如何监测对象中的数据？</td></tr><tr><td>通过<strong>setter实现监视</strong>，且要在new Vue时就传入要监测的数据。</td></tr><tr><td>(1).对象中后追加的属性，Vue默认不做响应式处理</td></tr><tr><td>(2).如需给后添加的属性做响应式，请使用如下API：</td></tr><tr><td>Vue.set(target，propertyName/index，value) 或</td></tr><tr><td>vm.$set(target，propertyName/index，value)</td></tr><tr><td></td></tr><tr><td>3. 如何监测数组中的数据？</td></tr><tr><td>通过包裹数组更新元素的方法实现，本质就是做了两件事：</td></tr><tr><td>(1).调用原生对应的方法对数组进行更新。</td></tr><tr><td>(2).重新解析模板，进而更新页面。</td></tr><tr><td></td></tr><tr><td>4.在Vue<strong>修改数组</strong>中的某个元素一定要用如下方法：</td></tr><tr><td>1.使用这些API:<strong>push()、pop()、shift()、unshift()、splice()、sort()、reverse()</strong></td></tr><tr><td>2.<strong>Vue.set() 或 vm.$set()</strong></td></tr><tr><td></td></tr><tr><td>特别注意：<strong>Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性</strong>！！！</td></tr></tbody></table></div><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发<strong>视图更新</strong>。这些被包裹过的方法包括：</p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><h3 id="1-13收集表单数据"><a href="#1-13收集表单数据" class="headerlink" title="1.13收集表单数据"></a>1.13收集表单数据</h3><div class="table-container"><table><thead><tr><th></th></tr></thead><tbody><tr><td>若：<input type="text">，则v-model收集的是value值，用户输入的就是value值。</td></tr><tr><td>若：<input type="radio">，则v-model收集的是value值，且要给标签配置value值。</td></tr><tr><td>若：<input type="checkbox"></td></tr><tr><td>1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</td></tr><tr><td>2.配置input的value属性:</td></tr><tr><td>(1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</td></tr><tr><td>(2)v-model的初始值是<strong>数组</strong>，那么收集的的就是value组成的数组</td></tr><tr><td>备注：v-model的三个修饰符：</td></tr><tr><td><strong>lazy：失去焦点再收集数据</strong></td></tr><tr><td><strong>number：输入字符串转为有效的数字</strong></td></tr><tr><td><strong>trim：输入首尾空格过滤</strong></td></tr></tbody></table></div><h3 id="1-14生命周期"><a href="#1-14生命周期" class="headerlink" title="1.14生命周期"></a>1.14生命周期</h3><div class="table-container"><table><thead><tr><th>生命周期： （一个组件 <strong>创建</strong>—&gt;<strong>运行</strong>—&gt;<strong>销毁</strong>的整个阶段，强调是一个<strong>时间段</strong>）</th></tr></thead><tbody><tr><td>1.又名：生命周期回调函数、生命周期函数、生命周期钩子。</td></tr><tr><td>2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</td></tr><tr><td>3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</td></tr><tr><td>4.生命周期函数中的this指向是vm 或 组件实例对象。</td></tr></tbody></table></div><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210913214607852.png" alt="生命周期的三个阶段"></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210913214540783.png" alt="生命周期"></p><div class="table-container"><table><thead><tr><th>常用的生命周期钩子：</th></tr></thead><tbody><tr><td>1.<strong>mounted</strong>: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</td></tr><tr><td>2.<strong>beforeDestroy</strong>: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</td></tr><tr><td></td></tr><tr><td>关于销毁Vue实例</td></tr><tr><td>1.销毁后借助Vue开发者工具看不到任何信息。</td></tr><tr><td>2.销毁后自定义事件会失效，但原生DOM事件依然有效。</td></tr><tr><td>3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</td></tr></tbody></table></div><h3 id="1-15过渡"><a href="#1-15过渡" class="headerlink" title="1.15过渡"></a>1.15过渡</h3><h4 id="1-15-1-原生实现过渡动画"><a href="#1-15-1-原生实现过渡动画" class="headerlink" title="1.15.1 原生实现过渡动画"></a>1.15.1 原生实现过渡动画</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>原生实现过渡动画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.pic</span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token comment">/* 过渡效果 */</span>            <span class="token property">transition</span><span class="token punctuation">:</span> 1s all linear<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.come</span><span class="token punctuation">{</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.leave</span><span class="token punctuation">{</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.2<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>切换过渡动画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://s3.ax1x.com/2020/12/13/reCaqg.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> isHidden <span class="token operator">=</span> <span class="token boolean">true</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isHidden<span class="token punctuation">)</span> img<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'pic leave'</span>            <span class="token keyword">else</span> img<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'pic come'</span>            isHidden <span class="token operator">=</span> <span class="token operator">!</span>isHidden        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-15-2-过渡动画vue实现"><a href="#1-15-2-过渡动画vue实现" class="headerlink" title="1.15.2 过渡动画vue实现"></a>1.15.2 过渡动画vue实现</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>过渡动画vue实现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.pic</span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment">/* 离开的起点，进入的终点 */</span>        <span class="token selector">.trans-leave,.trans-enter-to</span><span class="token punctuation">{</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 离开的终点，进入的起点 */</span>        <span class="token selector">.trans-leave-to,.trans-enter</span><span class="token punctuation">{</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.2<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 离开的过程，进入的过程 */</span>        <span class="token selector">.trans-leave-active,.trans-enter-active</span><span class="token punctuation">{</span>            <span class="token property">transition</span><span class="token punctuation">:</span> 1s all linear<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isHidden=!isHidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>switch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- 注意这里transition 是设置 name属性 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trans<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 通过 v-show切换显示与否 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!isHidden<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://s3.ax1x.com/2020/12/13/reCaqg.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    isHidden<span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-15-3-动画实现切换"><a href="#1-15-3-动画实现切换" class="headerlink" title="1.15.3 动画实现切换"></a>1.15.3 动画实现切换</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>动画案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">                <span class="token selector">.pic</span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 进入 */</span>        <span class="token selector">.qh-enter-active</span><span class="token punctuation">{</span>            <span class="token property">animation</span><span class="token punctuation">:</span> donghua 1s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 离开 */</span>        <span class="token selector">.qh-leave-active</span><span class="token punctuation">{</span>            <span class="token comment">/* 这里需要设置一个翻转 */</span>            <span class="token property">animation</span><span class="token punctuation">:</span> donghua 1s reverse<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 创建一个进入的动画 */</span>        <span class="token atrule"><span class="token rule">@keyframes</span> donghua</span><span class="token punctuation">{</span>            <span class="token selector">0%</span><span class="token punctuation">{</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">50%</span><span class="token punctuation">{</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.5<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">100%</span><span class="token punctuation">{</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow = !isShow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>qiehuan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- 这里也需要一个transition 包着需要切换的动画 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qh<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic enter<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://s3.ax1x.com/2020/12/13/reCaqg.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    isShow<span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-16过滤器"><a href="#1-16过滤器" class="headerlink" title="1.16过滤器"></a>1.16过滤器</h3><div class="table-container"><table><thead><tr><th>定义：<strong>对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）</strong>。</th></tr></thead><tbody><tr><td>语法：</td></tr><tr><td>1.注册过滤器：</td></tr><tr><td>2.使用过滤器： xxx \</td><td>过滤器名  或  v-bind:属性 = “xxx \</td><td>过滤器名”</td></tr><tr><td>备注：</td></tr><tr><td>1.过滤器也可以接收额外参数、多个过滤器也可以串联</td></tr><tr><td>2.并没有改变原本的数据, 是产生新的对应的数据</td></tr></tbody></table></div><p>==全局过滤器和局部过滤器命名冲突时，就近原则，调用局部过滤器==</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>A sentence:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>完整的句子：{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 注意这里过滤器可以传参 也就是切割的个数 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>切割后的：{{msg | mySlice(6)}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 注册一个全局过滤器 切割当前的一句话  过滤器两个参数 一个是过滤器的名字 一个是函数</span>        <span class="token comment">// Vue.filter('mySlice',function(value,num=3){  // 函数默认切割前三个</span>        <span class="token comment">//     return value.slice(0,num)</span>        <span class="token comment">// })</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    msg<span class="token operator">:</span> <span class="token string">'陈冠希是个大帅哥！！！！'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            filters<span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token function">mySlice</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">3</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-15内置指令"><a href="#1-15内置指令" class="headerlink" title="1.15内置指令"></a>1.15内置指令</h3><div class="table-container"><table><thead><tr><th>v-html指令：</th></tr></thead><tbody><tr><td>1.作用：向指定节点中渲染包含html结构的内容。</td></tr><tr><td>2.与插值语法的区别：</td></tr><tr><td>(1).v-html会替换掉节点中所有的内容，则不会。</td></tr><tr><td>(2).v-html可以识别html结构。</td></tr><tr><td>3.严重注意：v-html有安全性问题！！！！</td></tr><tr><td>(1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。</td></tr><tr><td>(2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>v-cloak指令（没有值）：</th></tr></thead><tbody><tr><td>1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</td></tr><tr><td>2.使用css配合v-cloak可以解决网速慢时页面展示出的问题。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>v-once指令（没有值）：</th></tr></thead><tbody><tr><td>1.v-once所在节点在初次动态渲染后，就视为静态内容了</td></tr><tr><td>2.以后数据的改变不会引起v-once所在结构的更新，就可以用于优化性能</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>v-pre指令：</th></tr></thead><tbody><tr><td>1.跳过其所在节点的编译过程。</td></tr><tr><td>2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</td></tr></tbody></table></div><h3 id="1-16自定义指令"><a href="#1-16自定义指令" class="headerlink" title="1.16自定义指令"></a>1.16自定义指令</h3><div class="table-container"><table><thead><tr><th>自定义指令总结：</th></tr></thead><tbody><tr><td>一、定义语法：</td></tr><tr><td>(1).局部指令：</td></tr><tr><td>directives{指令名:回调函数}</td></tr><tr><td>(2).全局指令：</td></tr><tr><td>Vue.directive(指令名,配置对象) 或   Vue.directive(指令名,回调函数)</td></tr><tr><td></td></tr><tr><td>二、配置对象中常用的3个回调：</td></tr><tr><td>(1).bind：指令与元素成功绑定时调用。</td></tr><tr><td>(2).inserted：指令所在元素被插入页面时调用。</td></tr><tr><td>(3).update：指令所在模板结构被重新解析时调用。</td></tr><tr><td></td></tr><tr><td>三、备注：</td></tr><tr><td>1.<strong>指令定义时不加v-</strong>，但<strong>使用时要加v-</strong>；</td></tr><tr><td>2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 局部指令 </span>directives<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">// 自定义函数big(element,binding) </span>    <span class="token comment">// 何时调用? </span>    <span class="token comment">//  1.指令和元素绑定成功时</span>    <span class="token comment">//  2.指令所在的模板被重新解析时</span>    <span class="token function">big</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// console.log(element,binding)</span>        element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> binding<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        fbind<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token comment">// 指令与元素绑定时</span>            <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">10</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>                                   <span class="token comment">// 指令所在元素被插入时</span>                <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    element<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token comment">// 指令所在模板被更新时</span>                    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">10</span>                    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里自定义一个 v<span class="token operator">-</span>focus 指令 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>focus<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token comment">// 这里是实现 局部自定义指令 聚焦</span>        <span class="token comment">// directives: {</span>        <span class="token comment">//     focus: {</span>        <span class="token comment">//         mounted(el) {</span>        <span class="token comment">//             el.focus()</span>        <span class="token comment">//         },</span>        <span class="token comment">//     }</span>        <span class="token comment">// }</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token comment">// 这里实现 全局自定义指令</span>app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>自定义指令<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-big</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTips <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token comment">// 全局自定义指令</span>        <span class="token comment">// Vue.directive('big',function(element,binding){</span>        <span class="token comment">//     element.innerText = binding.value.toUpperCase()</span>        <span class="token comment">// })</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    name<span class="token operator">:</span> <span class="token string">'vansforever'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">// 局部自定义指令</span>            directives<span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token function">big</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">// element binding</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">;</span>                    element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-17自定义插件"><a href="#1-17自定义插件" class="headerlink" title="1.17自定义插件"></a>1.17自定义插件</h3><p>自定义一个插件如下</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 插件是一个对象</span><span class="token keyword">const</span> chajian <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 插件上的install方法  </span>chajian<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 添加全局指令</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'big'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 改标签里面大写</span>        element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'small-text'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 给Vue自身添加属性</span>    Vue<span class="token punctuation">.</span>hhh <span class="token operator">=</span> <span class="token string">'hhh'</span>    <span class="token comment">// 给Vue原型上添加数据 供vm使用</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$randomNum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span>max</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义的插件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引入自定义的插件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./chajian.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>自定义插件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-big</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-small-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{$randomNum(3,6)}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTips <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token comment">// 使用引入的自定义插件</span>        Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>chajian<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>hhh<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    name<span class="token operator">:</span><span class="token string">'vans'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础笔记(二)</title>
      <link href="/2021/09/12/vue-ji-chu-bi-ji-er/"/>
      <url>/2021/09/12/vue-ji-chu-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基础-相关笔记（2）"><a href="#Vue基础-相关笔记（2）" class="headerlink" title="Vue基础 相关笔记（2）"></a>Vue基础 相关笔记（2）</h1><h3 id="1-7事件处理"><a href="#1-7事件处理" class="headerlink" title="1.7事件处理"></a>1.7事件处理</h3><div class="table-container"><table><thead><tr><th><strong>事件的基本使用</strong>：</th></tr></thead><tbody><tr><td>1. 使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；</td></tr><tr><td>2. 事件的回调需要配置在methods对象中，最终会在vm上；</td></tr><tr><td>3. methods中配置的函数，不要用箭头函数！否则this就不是vm了；</td></tr><tr><td>4. methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；</td></tr><tr><td>5.@click=”demo” 和 @click=”demo($event)” 效果一致，但后者可以传参；</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"showInfo1"</span><span class="token operator">&gt;</span>点我提示信息（不传参）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"showInfo1"</span><span class="token operator">&gt;</span>点我提示信息（不传参）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"showInfo2(66,$event)"</span><span class="token operator">&gt;</span>点我提示信息（传参）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th><strong>Vue中的事件修饰符</strong>：</th></tr></thead><tbody><tr><td>1. <strong>prevent</strong>：阻止默认事件（常用）；</td></tr><tr><td>2. <strong>stop</strong>：      阻止事件冒泡（常用）；</td></tr><tr><td>3. <strong>once</strong>：     事件只触发一次（常用）；</td></tr><tr><td>4. capture：使用事件的捕获模式；</td></tr><tr><td>5. self：只有event.target是当前操作的元素时才触发事件；（也可以阻止冒泡）</td></tr><tr><td>6. passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> prevent 阻止默认事件  这里是阻止跳转事件 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span> @click<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> stop 阻止冒泡事件 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"demo1"</span> @click<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>clcik me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> once 事件只触发一次 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>clcik me just once<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 修饰符可以连续写 这里是先阻止跳转再阻止冒泡 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"demo1"</span> @click<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span> @click<span class="token punctuation">.</span>prevent<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>点我提示信息不跳转不冒泡<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th><strong>1. Vue中常用的按键别名</strong>：</th></tr></thead><tbody><tr><td>回车 =&gt; <strong>enter（按键编码为 13 ）</strong></td></tr><tr><td>删除 =&gt; <strong>delete</strong> (捕获“删除”和“退格”键)</td></tr><tr><td>退出 =&gt; <strong>esc</strong></td></tr><tr><td>空格 =&gt; <strong>space</strong></td></tr><tr><td>换行 =&gt; <strong>tab</strong> (特殊，必须配合<strong>keydown</strong>去使用)</td></tr><tr><td>上 =&gt; <strong>up</strong></td></tr><tr><td>下 =&gt; <strong>down</strong></td></tr><tr><td>左 =&gt; <strong>left</strong></td></tr><tr><td>右 =&gt; <strong>right</strong></td></tr><tr><td></td></tr><tr><td>2. Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</td></tr><tr><td></td></tr><tr><td>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</td></tr><tr><td>(1).配合<strong>keyup</strong>使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</td></tr><tr><td>(2).配合<strong>keydown</strong>使用：正常触发事件。</td></tr><tr><td></td></tr><tr><td>4.也可以使用keyCode去指定具体的按键（不推荐）</td></tr><tr><td></td></tr><tr><td>5. Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"按下enter键提示输入"</span> @keyup<span class="token punctuation">.</span>enter<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> tab 键必须配合keydown使用 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"按下tab键提示输入"</span> @keydown<span class="token punctuation">.</span>tab<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> ctrl<span class="token operator">+</span>y 类似于热键进行触发 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"按下ctrl+y键提示输入"</span> @keyup<span class="token punctuation">.</span>ctrl<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-8计算属性"><a href="#1-8计算属性" class="headerlink" title="1.8计算属性"></a>1.8计算属性</h3><div class="table-container"><table><thead><tr><th></th></tr></thead><tbody><tr><td>1.定义：要用的属性不存在，要通过已有属性计算得来。</td></tr><tr><td>2.原理：底层借助了<strong>Objcet.defineproperty</strong>方法提供的<strong>getter和setter</strong>。</td></tr><tr><td>3. <strong>get函数</strong>什么时候执行？</td></tr><tr><td>(1).<strong>初次读取</strong>时会执行一次。</td></tr><tr><td>(2).当依赖的<strong>数据发生改变</strong>时会被再次调用。</td></tr><tr><td><code>4.优势：与methods实现相比，内部有缓存机制（复用)，效率更高，调试方便。</code></td></tr><tr><td>5.备注：</td></tr><tr><td>1.计算属性最终会出现在vm上，直接读取使用即可。</td></tr><tr><td>2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 计算属性</span>computed<span class="token operator">:</span><span class="token punctuation">{</span>    fullname<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// 当读取fullname时，get会被调用 有缓存</span>        <span class="token comment">// 1.初次读取fullname时</span>        <span class="token comment">// 2.所依赖的数据发生变化时</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"get被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 此处的this为vm</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname        <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">// fullname被修改时调用set</span>            <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set ....'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> arr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>计算属性一般不修改，只读不改</strong> 简写如下</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function-variable function">fullname</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"get被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 此处的this为vm</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-9监视属性"><a href="#1-9监视属性" class="headerlink" title="1.9监视属性"></a>1.9监视属性</h3><div class="table-container"><table><thead><tr><th>监视属性watch：</th></tr></thead><tbody><tr><td>1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作</td></tr><tr><td>2.监视的属性必须存在，才能进行监视！！</td></tr><tr><td>3.监视的两种写法：</td></tr><tr><td>(1).new Vue时传入watch配置</td></tr><tr><td>(2).通过vm.$watch监视</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    firstname<span class="token operator">:</span> <span class="token string">'vans'</span><span class="token punctuation">,</span>                    lastname<span class="token operator">:</span> <span class="token string">'Lin'</span><span class="token punctuation">,</span>                    fullname<span class="token operator">:</span> <span class="token string">''</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">// 监视属性 watch</span>            watch<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token comment">// 监视名 直接函数式写法</span>                <span class="token comment">// firstname(newVal,oldVal){</span>                <span class="token comment">//     console.log('firstname is changing');</span>                <span class="token comment">//     this.fullname =  this.lastname + '-' + newVal</span>                <span class="token comment">// },</span>                <span class="token comment">// 对象写法 </span>                firstname<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token comment">// 设置 fullname 第一次能够自动填充 </span>                    immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token comment">// 这里的函数必须是handler</span>                    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment">// console.log('firstname is changing',newVal);</span>                                                <span class="token keyword">this</span><span class="token punctuation">.</span>fullname <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> newVal                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                                <span class="token comment">// 监视姓</span>                <span class="token comment">// lastname(newVal,oldVal){</span>                <span class="token comment">//     console.log('lastname is changing');</span>                <span class="token comment">//     this.fullname =  newVal + '-' + this.firstname</span>                <span class="token comment">// },</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>                   <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// watch的第二种写法  这里一般用于刚开始没想监视该属性 之后想监视该属性 又不想修改之前的监视属性    </span>       vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'lastname'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">// console.log('lastname is changing');</span>                                        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>fullname <span class="token operator">=</span>  newVal <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th><strong>computed</strong>和<strong>watch</strong>之间的区别：</th></tr></thead><tbody><tr><td>1.computed能完成的功能，watch都可以完成。</td></tr><tr><td>2.watch能完成的功能，computed不一定能完成，例如：watch可以进行<strong>异步操作</strong>。</td></tr><tr><td>两个重要的小原则：</td></tr><tr><td>1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</td></tr><tr><td>2.所有不被Vue所管理的函数（<strong>定时器的回调函数</strong>、<strong>ajax的回调函数</strong>等、<strong>Promise的回调函数</strong>），最     好写成箭头函数，</td></tr><tr><td>这样this的指向才是vm 或 组件实例对象。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>深度监视：</th></tr></thead><tbody><tr><td>(1).Vue中的watch默认不监测对象内部值的改变（<strong>一层</strong>）。</td></tr><tr><td>(2).配置<strong>deep:true</strong>可以监测对象内部值改变（<strong>多层</strong>）。</td></tr><tr><td>备注：</td></tr><tr><td>(1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</td></tr><tr><td>(2).使用watch时根据数据的具体结构，决定是否采用深度监视。</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 监视多级结构中的某个属性</span><span class="token string">'numbers.a'</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a被改变了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 监视多级结构中所有属性的变化</span>    numbers<span class="token operator">:</span> <span class="token punctuation">{</span>        deep<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'numbers改变了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-10绑定样式"><a href="#1-10绑定样式" class="headerlink" title="1.10绑定样式"></a>1.10绑定样式</h3><div class="table-container"><table><thead><tr><th></th></tr></thead><tbody><tr><td>1. class样式</td></tr><tr><td>写法<strong>:class=”xxx”</strong> xxx可以是字符串、对象、数组。</td></tr><tr><td>字符串写法适用于：类名不确定，要动态获取。</td></tr><tr><td>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</td></tr><tr><td>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</td></tr><tr><td>2. style样式</td></tr><tr><td>:style=”{fontSize: xxx}”其中xxx是动态值。</td></tr><tr><td>:style=”[a,b]”其中a、b是样式对象（为一个<strong>key</strong>，不能瞎写）。</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式 字符串写法  适用于：样式的类名不确定，需要动态指定 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"mood"</span> @click<span class="token operator">=</span><span class="token string">"changeMood"</span><span class="token operator">&gt;</span>          <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式 数组写法  适用于：样式的个数不确定 名字也不确定 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"classArr"</span><span class="token operator">&gt;</span>          <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式 对象写法  适用于：决定样式用不用 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"classObj"</span><span class="token operator">&gt;</span>          <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定style样式 对象写法 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"styleObj"</span><span class="token operator">&gt;</span>          <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-11条件渲染"><a href="#1-11条件渲染" class="headerlink" title="1.11条件渲染"></a>1.11条件渲染</h3><div class="table-container"><table><thead><tr><th>绑定样式：</th></tr></thead><tbody><tr><td>1. class样式</td></tr><tr><td>写法:class=”xxx” xxx可以是字符串、对象、数组。</td></tr><tr><td>字符串写法适用于：类名不确定，要动态获取。</td></tr><tr><td>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</td></tr><tr><td>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</td></tr><tr><td>2. style样式</td></tr><tr><td>:style=”{fontSize: xxx}”其中xxx是动态值。</td></tr><tr><td>:style=”[a,b]”其中a、b是样式对象。</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>show条件渲染 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"2===1"</span><span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span><span class="token keyword">if</span>条件渲染 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"2===1"</span><span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> 和 v<span class="token operator">-</span><span class="token keyword">else</span> <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n === 1"</span><span class="token operator">&gt;</span>Angular<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n === 2"</span><span class="token operator">&gt;</span>React<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n === 3"</span><span class="token operator">&gt;</span>Vue<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">&gt;</span>hhhh<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>template 和 v<span class="token operator">-</span><span class="token keyword">if</span>配合使用  <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n===1"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token number">111</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token number">2222</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token number">3333</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础笔记(一)</title>
      <link href="/2021/09/10/vue-ji-chu-bi-ji-yi/"/>
      <url>/2021/09/10/vue-ji-chu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基础-相关笔记（1）"><a href="#Vue基础-相关笔记（1）" class="headerlink" title="Vue基础 相关笔记（1）"></a>Vue基础 相关笔记（1）</h1><h3 id="vue-的两个特性"><a href="#vue-的两个特性" class="headerlink" title="vue 的两个特性"></a>vue 的两个特性</h3><ol><li><p><strong>数据驱动视图</strong>：</p><ul><li>数据的变化<strong>会驱动视图</strong>自动更新</li><li>好处：程序员只管把数据维护好，那么页面结构会被 vue 自动渲染出来！</li></ul></li><li><p><strong>双向数据绑定</strong>：</p><blockquote><p>在网页中，form 表单负责<strong>采集数据</strong>，Ajax 负责<strong>提交数据</strong>。</p></blockquote><ul><li>js 数据的变化，会被自动渲染到页面上</li><li>页面上表单采集的数据发生变化的时候，会被 vue 自动获取到，并更新到 js 数据中</li></ul></li></ol><blockquote><p>注意：数据驱动视图和双向数据绑定的底层原理是 <strong>MVVM</strong>（<strong>Mode</strong> 数据源、<strong>View</strong> 视图、<strong>ViewModel</strong> 就是 vue 的实例）</p></blockquote><h3 id="1-1vue初印象"><a href="#1-1vue初印象" class="headerlink" title="1.1vue初印象"></a>1.1vue初印象</h3><h4 id="1-1-1初识vue"><a href="#1-1-1初识vue" class="headerlink" title="1.1.1初识vue"></a>1.1.1初识vue</h4><p> <a href="https://cn.vuejs.org/js/vue.js">vue.js开发版下载</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入vue <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/vue.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>初识vue<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>school<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>姓名为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>年龄为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token comment">// 创建一个vue实例</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment">// 指定当前挂载的容器 这里一般使用的是id选择器 当然也可以用类选择器</span>            el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token comment">// data用于存放数据 </span>            data<span class="token operator">:</span> <span class="token punctuation">{</span>                school<span class="token operator">:</span> <span class="token string">'五道口幼儿园'</span><span class="token punctuation">,</span>                person<span class="token operator">:</span> <span class="token punctuation">{</span>                    name<span class="token operator">:</span> <span class="token string">'vans'</span><span class="token punctuation">,</span>                    age<span class="token operator">:</span> <span class="token number">18</span>                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// 这里其实也可以创建多个vue实例，但一般只创建一个vue实例</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-2表达式解析"><a href="#1-1-2表达式解析" class="headerlink" title="1.1.2表达式解析"></a>1.1.2表达式解析</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里补充下表达式 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里展示的是 name <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">,</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里展示的是 age 注意这里加了括号 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">,</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> 这里展示的 age <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2vue模板语法"><a href="#1-2vue模板语法" class="headerlink" title="1.2vue模板语法"></a>1.2vue模板语法</h3><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>1.插值语法：</strong></th></tr></thead><tbody><tr><td style="text-align:left">功能：用于解析标签体内容。</td></tr><tr><td style="text-align:left">写法：，xxx是js表达式，且可以直接读取到data中的所有属性。</td></tr><tr><td style="text-align:left">==注意：插值表达式只能用在元素的<strong>内容节点</strong>中，不能用在元素的<strong>属性节点</strong>中！==</td></tr><tr><td style="text-align:left"><strong>2.指令语法：</strong></td></tr><tr><td style="text-align:left">功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。</td></tr><tr><td style="text-align:left">举例：v-bind:href=”xxx” 或  简写为 :href=”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 插值语法 <span class="token operator">--</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>school<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>姓名为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>年龄为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指令语法 <span class="token operator">--</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>a v<span class="token operator">-</span>bind<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">&gt;</span>跳转链接<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>bind简写  <span class="token operator">--</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>a <span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">&gt;</span>baidu<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-数据绑定"><a href="#1-3-数据绑定" class="headerlink" title="1.3 数据绑定"></a>1.3 数据绑定</h3><div class="table-container"><table><thead><tr><th>Vue中有2种数据绑定的方式：</th></tr></thead><tbody><tr><td>1.<strong>单向绑定(v-bind)</strong>：数据只能从data流向页面。</td></tr><tr><td>2.<strong>双向绑定(v-model)</strong>：数据不仅能从data流向页面，还可以从页面流向data。</td></tr><tr><td>备注：</td></tr><tr><td>1. 双向绑定一般都应用在<strong>表单类元素</strong>上（如：<strong>input</strong>、<strong>select</strong>等）</td></tr><tr><td>2. v-model:value 可以简写为 <strong>v-model</strong>，因为v-model默认收集的就是value值。</td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里都适用的简写  <span class="token operator">--</span><span class="token operator">&gt;</span>      单向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">'msg'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      双向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">'msg'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-4-el和data的两种写法"><a href="#1-4-el和data的两种写法" class="headerlink" title="1.4 el和data的两种写法"></a>1.4 el和data的两种写法</h3><div class="table-container"><table><thead><tr><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left"><strong>1. el有2种写法</strong></td></tr><tr><td style="text-align:left">(1).new Vue时候配置el属性。</td></tr><tr><td style="text-align:left">(2).先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</td></tr><tr><td style="text-align:left"><strong>2. data有2种写法</strong></td></tr><tr><td style="text-align:left">(1).对象式</td></tr><tr><td style="text-align:left">(2).函数式</td></tr><tr><td style="text-align:left">如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</td></tr><tr><td style="text-align:left">3.一个重要的原则：</td></tr><tr><td style="text-align:left"><strong>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</strong></td></tr></tbody></table></div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// el的两种写法</span><span class="token comment">// const v = new Vue({</span><span class="token comment">//     // el: '#root',  //第一种写法</span><span class="token comment">//     data: {</span><span class="token comment">//         name: 'vanous',</span><span class="token comment">//         address: '武汉',</span><span class="token comment">//     }</span><span class="token comment">// })</span><span class="token comment">// console.log(v)</span><span class="token comment">// v.$mount('#root') //第二种写法</span><span class="token comment">//data的两种写法</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    <span class="token comment">// data第一种写法 （对象式）</span>    <span class="token comment">// data: {</span>    <span class="token comment">//     name: 'vaous' </span>    <span class="token comment">// }</span>    <span class="token comment">// data的第二种写法 （函数式）</span>    <span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'vanous'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-MVVM模型"><a href="#1-5-MVVM模型" class="headerlink" title="1.5 MVVM模型"></a>1.5 MVVM模型</h3><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210910181834851.png" alt="MVVM模型图"></p><p><strong>View</strong>：                               <strong>页面</strong>结构</p><p><strong>Model</strong>：                             <strong>data</strong>中的<strong>数据</strong></p><p><strong>VM（ViewModel）</strong>：     <strong>Vue</strong>中的<strong>实例对象</strong>    <strong>MVVM</strong>的<strong>核心</strong></p><h3 id="1-6数据代理"><a href="#1-6数据代理" class="headerlink" title="1.6数据代理"></a>1.6数据代理</h3><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210910183244000.png" alt="数据代理图示"></p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>1.Vue中的数据代理：</strong></th></tr></thead><tbody><tr><td style="text-align:left">通过vm对象来代理data对象中属性的操作（读/写）</td></tr><tr><td style="text-align:left"><strong>2.Vue中数据代理的好处：</strong></td></tr><tr><td style="text-align:left">更加方便的操作data中的数据</td></tr><tr><td style="text-align:left"><strong>3.基本原理：</strong></td></tr><tr><td style="text-align:left">通过Object.defineProperty()把data对象中所有属性添加到vm上。</td></tr><tr><td style="text-align:left">为每一个添加到vm上的属性，都指定一个getter/setter。</td></tr><tr><td style="text-align:left">在getter/setter内部去操作（读/写）data中对应的属性。</td></tr></tbody></table></div><p>数据收集存放在 <strong>vm._data</strong> 里面，能够更高效的监视数据。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span><span class="token comment">// 模拟数据代理</span><span class="token keyword">let</span> _data <span class="token operator">=</span> <span class="token punctuation">{</span>msg<span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">}</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span><span class="token string">'msg'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        _data<span class="token punctuation">.</span>msg <span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> _data<span class="token punctuation">.</span>msg    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'hhh'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT 主题版本问题</title>
      <link href="/2021/08/31/next-zhu-ti/"/>
      <url>/2021/08/31/next-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="next主题版本问题"><a href="#next主题版本问题" class="headerlink" title="next主题版本问题"></a><strong>next主题</strong>版本问题</h1><h3 id="NexT-V5版本安装配置"><a href="#NexT-V5版本安装配置" class="headerlink" title="NexT V5版本安装配置"></a>NexT V5版本安装配置</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 老版本next主题的安装  【NexT V5 版本】git clone https://github.com/iissnan/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上是将 <strong>Next</strong> 主题【V5】下载到<strong>blog</strong>目录的 <strong>themes</strong> 主题下的 <strong>next </strong>文件夹中；首先打开站点的<strong>_config.yml</strong> 的配置文件【滑到最下面】，首先修改主题为 <strong>next</strong></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831085833241.png" alt="主题设置为next"></p><p>这里还需要设置下 语言 为 <strong>zh-Hans</strong> 【这里在站点的<strong>_config.yml</strong> 的配置文件最上面】</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831085951721.png" alt="修改语言为zh-Hans"></p><p>然后打开 <strong>theme</strong> 文件中 <strong>next</strong> 主题文件中的 <strong>_config.yml</strong> 配置文件，<code>这里不是上面的站点文件</code> ，找到<strong>主题</strong>配置文件中的 <strong>_config.yml</strong> 中的 <strong>Scheme Setting</strong> 对其进行修改，</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090349006.png" alt="themes文件夹"></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090517504.png" alt="next文件夹"></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090542289.png" alt="_config.yml文件"></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090825310.png" alt="主题样式设置"></p><p>将<strong>主题</strong>改为 <strong>next</strong> 之后 ，执行如下命令，查看是否修改成功</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 清除hexo缓存hexo clean# 生成静态文件hexo g# 开启本地预览hexo s# 部署到github中hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NexT-V7-版本配置"><a href="#NexT-V7-版本配置" class="headerlink" title="NexT V7+版本配置"></a>NexT V7+版本配置</h3><p>这里先贴下官网关于新版本的解释 <a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md；">https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md；</a></p><p>在 5.1.x 版本和新版本之间没有很大的革命性改进。主版本号变更至 7 主要是因为：</p><ol><li>主仓库已从 <a href="https://github.com/iissnan/hexo-theme-next">iissnan 名下</a> 迁移至 <a href="https://github.com/theme-next">theme-next</a> 组织。</li><li><code>next/source/lib</code> 目录下的绝大多数库被移出到了 <a href="https://github.com/theme-next">NexT 组织的外部仓库</a>中。</li><li>第三方插件 <a href="https://github.com/willin/hexo-wordcount"><code>hexo-wordcount</code></a> 被 <a href="https://github.com/theme-next/hexo-symbols-count-time"><code>hexo-symbols-count-time</code></a> 所取代，因为 <code>hexo-symbols-count-time</code> 没有任何外部 Node.js 依赖、也没有会导致生成站点时的性能问题 <a href="https://github.com/willin/hexo-wordcount/issues/7">language filter</a>。</li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 安装新版本的 next 主题git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如此，你可以在不修改原有的 NexT v5.1.x 目录的同时使用 <code>next-reloaded</code> 目录中的新版本主题。</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831092443586.png" alt="安装新版本next主题成功截图"></p><p>显示上面的提示，即为安装成功；然后修改主题为： <strong>next-reloaded</strong></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831092648249.png" alt="修改主题"></p><p><strong>更新语言配置</strong></p><p>从 v6.0.3 版本起，<code>zh-Hans</code> 改名为 <code>zh-CN</code>：<a href="https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3">https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3</a></p><p>升级到 v6.0.3 及以后版本的用户，需要显式修改 Hexo 主配置文件 <code>_config.yml</code> 里的 <code>language</code> 配置，否则语言显示不正确。</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831092820091.png" alt="修改语言"></p><p>这里就是新版本的所有设置，然后再将如下命令执行下：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 清除hexo缓存hexo clean# 生成静态文件hexo g# 开启本地预览hexo s# 部署到github中hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里提醒下，可能github.io更新需要点时间，刷新之后等待一下，看主题是否修改成功；下面就是成功修改主题为 Next 的截图。</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831093407346.png" alt="next主题博客预览"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
