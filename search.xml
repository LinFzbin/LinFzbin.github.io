<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue基础笔记(二)</title>
      <link href="/2021/09/12/vue-ji-chu-bi-ji-er/"/>
      <url>/2021/09/12/vue-ji-chu-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基础-相关笔记（2）"><a href="#Vue基础-相关笔记（2）" class="headerlink" title="Vue基础 相关笔记（2）"></a>Vue基础 相关笔记（2）</h1><h3 id="1-7事件处理"><a href="#1-7事件处理" class="headerlink" title="1.7事件处理"></a>1.7事件处理</h3><table><thead><tr><th><strong>事件的基本使用</strong>：</th></tr></thead><tbody><tr><td>1. 使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；</td></tr><tr><td>2. 事件的回调需要配置在methods对象中，最终会在vm上；</td></tr><tr><td>3. methods中配置的函数，不要用箭头函数！否则this就不是vm了；</td></tr><tr><td>4. methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；</td></tr><tr><td>5.@click=”demo” 和 @click=”demo($event)” 效果一致，但后者可以传参；</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"showInfo1"</span><span class="token operator">&gt;</span>点我提示信息（不传参）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"showInfo1"</span><span class="token operator">&gt;</span>点我提示信息（不传参）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"showInfo2(66,$event)"</span><span class="token operator">&gt;</span>点我提示信息（传参）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th><strong>Vue中的事件修饰符</strong>：</th></tr></thead><tbody><tr><td>1. <strong>prevent</strong>：阻止默认事件（常用）；</td></tr><tr><td>2. <strong>stop</strong>：      阻止事件冒泡（常用）；</td></tr><tr><td>3. <strong>once</strong>：     事件只触发一次（常用）；</td></tr><tr><td>4. capture：使用事件的捕获模式；</td></tr><tr><td>5. self：只有event.target是当前操作的元素时才触发事件；（也可以阻止冒泡）</td></tr><tr><td>6. passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> prevent 阻止默认事件  这里是阻止跳转事件 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span> @click<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> stop 阻止冒泡事件 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"demo1"</span> @click<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>clcik me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> once 事件只触发一次 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>clcik me just once<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 修饰符可以连续写 这里是先阻止跳转再阻止冒泡 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"demo1"</span> @click<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span> @click<span class="token punctuation">.</span>prevent<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>点我提示信息不跳转不冒泡<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th><strong>1. Vue中常用的按键别名</strong>：</th></tr></thead><tbody><tr><td>回车 =&gt; <strong>enter（按键编码为 13 ）</strong></td></tr><tr><td>删除 =&gt; <strong>delete</strong> (捕获“删除”和“退格”键)</td></tr><tr><td>退出 =&gt; <strong>esc</strong></td></tr><tr><td>空格 =&gt; <strong>space</strong></td></tr><tr><td>换行 =&gt; <strong>tab</strong> (特殊，必须配合<strong>keydown</strong>去使用)</td></tr><tr><td>上 =&gt; <strong>up</strong></td></tr><tr><td>下 =&gt; <strong>down</strong></td></tr><tr><td>左 =&gt; <strong>left</strong></td></tr><tr><td>右 =&gt; <strong>right</strong></td></tr><tr><td></td></tr><tr><td>2. Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</td></tr><tr><td></td></tr><tr><td>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</td></tr><tr><td>(1).配合<strong>keyup</strong>使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</td></tr><tr><td>(2).配合<strong>keydown</strong>使用：正常触发事件。</td></tr><tr><td></td></tr><tr><td>4.也可以使用keyCode去指定具体的按键（不推荐）</td></tr><tr><td></td></tr><tr><td>5. Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"按下enter键提示输入"</span> @keyup<span class="token punctuation">.</span>enter<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> tab 键必须配合keydown使用 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"按下tab键提示输入"</span> @keydown<span class="token punctuation">.</span>tab<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> ctrl<span class="token operator">+</span>y 类似于热键进行触发 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"按下ctrl+y键提示输入"</span> @keyup<span class="token punctuation">.</span>ctrl<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-8计算属性"><a href="#1-8计算属性" class="headerlink" title="1.8计算属性"></a>1.8计算属性</h3><table><thead><tr><th></th></tr></thead><tbody><tr><td>1.定义：要用的属性不存在，要通过已有属性计算得来。</td></tr><tr><td>2.原理：底层借助了<strong>Objcet.defineproperty</strong>方法提供的<strong>getter和setter</strong>。</td></tr><tr><td>3. <strong>get函数</strong>什么时候执行？</td></tr><tr><td>(1).<strong>初次读取</strong>时会执行一次。</td></tr><tr><td>(2).当依赖的<strong>数据发生改变</strong>时会被再次调用。</td></tr><tr><td><code>4.优势：与methods实现相比，内部有缓存机制（复用)，效率更高，调试方便。</code></td></tr><tr><td>5.备注：</td></tr><tr><td>1.计算属性最终会出现在vm上，直接读取使用即可。</td></tr><tr><td>2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 计算属性</span>computed<span class="token operator">:</span><span class="token punctuation">{</span>    fullname<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// 当读取fullname时，get会被调用 有缓存</span>        <span class="token comment">// 1.初次读取fullname时</span>        <span class="token comment">// 2.所依赖的数据发生变化时</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"get被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 此处的this为vm</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname        <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">// fullname被修改时调用set</span>            <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set ....'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> arr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>计算属性一般不修改，只读不改</strong> 简写如下</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function-variable function">fullname</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"get被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 此处的this为vm</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-9监视属性"><a href="#1-9监视属性" class="headerlink" title="1.9监视属性"></a>1.9监视属性</h3><table><thead><tr><th>监视属性watch：</th></tr></thead><tbody><tr><td>1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作</td></tr><tr><td>2.监视的属性必须存在，才能进行监视！！</td></tr><tr><td>3.监视的两种写法：</td></tr><tr><td>(1).new Vue时传入watch配置</td></tr><tr><td>(2).通过vm.$watch监视</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    firstname<span class="token operator">:</span> <span class="token string">'vans'</span><span class="token punctuation">,</span>                    lastname<span class="token operator">:</span> <span class="token string">'Lin'</span><span class="token punctuation">,</span>                    fullname<span class="token operator">:</span> <span class="token string">''</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">// 监视属性 watch</span>            watch<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token comment">// 监视名 直接函数式写法</span>                <span class="token comment">// firstname(newVal,oldVal){</span>                <span class="token comment">//     console.log('firstname is changing');</span>                <span class="token comment">//     this.fullname =  this.lastname + '-' + newVal</span>                <span class="token comment">// },</span>                <span class="token comment">// 对象写法 </span>                firstname<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token comment">// 设置 fullname 第一次能够自动填充 </span>                    immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token comment">// 这里的函数必须是handler</span>                    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment">// console.log('firstname is changing',newVal);</span>                                                <span class="token keyword">this</span><span class="token punctuation">.</span>fullname <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> newVal                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                                <span class="token comment">// 监视姓</span>                <span class="token comment">// lastname(newVal,oldVal){</span>                <span class="token comment">//     console.log('lastname is changing');</span>                <span class="token comment">//     this.fullname =  newVal + '-' + this.firstname</span>                <span class="token comment">// },</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>                   <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// watch的第二种写法  这里一般用于刚开始没想监视该属性 之后想监视该属性 又不想修改之前的监视属性    </span>       vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'lastname'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">// console.log('lastname is changing');</span>                                        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>fullname <span class="token operator">=</span>  newVal <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th><strong>computed</strong>和<strong>watch</strong>之间的区别：</th></tr></thead><tbody><tr><td>1.computed能完成的功能，watch都可以完成。</td></tr><tr><td>2.watch能完成的功能，computed不一定能完成，例如：watch可以进行<strong>异步操作</strong>。</td></tr><tr><td>两个重要的小原则：</td></tr><tr><td>1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</td></tr><tr><td>2.所有不被Vue所管理的函数（<strong>定时器的回调函数</strong>、<strong>ajax的回调函数</strong>等、<strong>Promise的回调函数</strong>），最     好写成箭头函数，</td></tr><tr><td>这样this的指向才是vm 或 组件实例对象。</td></tr></tbody></table><table><thead><tr><th>深度监视：</th></tr></thead><tbody><tr><td>(1).Vue中的watch默认不监测对象内部值的改变（<strong>一层</strong>）。</td></tr><tr><td>(2).配置<strong>deep:true</strong>可以监测对象内部值改变（<strong>多层</strong>）。</td></tr><tr><td>备注：</td></tr><tr><td>(1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</td></tr><tr><td>(2).使用watch时根据数据的具体结构，决定是否采用深度监视。</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 监视多级结构中的某个属性</span><span class="token string">'numbers.a'</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a被改变了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 监视多级结构中所有属性的变化</span>    numbers<span class="token operator">:</span> <span class="token punctuation">{</span>        deep<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'numbers改变了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-10绑定样式"><a href="#1-10绑定样式" class="headerlink" title="1.10绑定样式"></a>1.10绑定样式</h3><table><thead><tr><th></th></tr></thead><tbody><tr><td>1. class样式</td></tr><tr><td>写法**:class=”xxx”** xxx可以是字符串、对象、数组。</td></tr><tr><td>字符串写法适用于：类名不确定，要动态获取。</td></tr><tr><td>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</td></tr><tr><td>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</td></tr><tr><td>2. style样式</td></tr><tr><td>:style=”{fontSize: xxx}”其中xxx是动态值。</td></tr><tr><td>:style=”[a,b]”其中a、b是样式对象（为一个<strong>key</strong>，不能瞎写）。</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式 字符串写法  适用于：样式的类名不确定，需要动态指定 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"mood"</span> @click<span class="token operator">=</span><span class="token string">"changeMood"</span><span class="token operator">&gt;</span>          <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式 数组写法  适用于：样式的个数不确定 名字也不确定 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"classArr"</span><span class="token operator">&gt;</span>          <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式 对象写法  适用于：决定样式用不用 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"classObj"</span><span class="token operator">&gt;</span>          <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定style样式 对象写法 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"styleObj"</span><span class="token operator">&gt;</span>          <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-11条件渲染"><a href="#1-11条件渲染" class="headerlink" title="1.11条件渲染"></a>1.11条件渲染</h3><table><thead><tr><th>绑定样式：</th></tr></thead><tbody><tr><td>1. class样式</td></tr><tr><td>写法:class=”xxx” xxx可以是字符串、对象、数组。</td></tr><tr><td>字符串写法适用于：类名不确定，要动态获取。</td></tr><tr><td>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</td></tr><tr><td>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</td></tr><tr><td>2. style样式</td></tr><tr><td>:style=”{fontSize: xxx}”其中xxx是动态值。</td></tr><tr><td>:style=”[a,b]”其中a、b是样式对象。</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>show条件渲染 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"2===1"</span><span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span><span class="token keyword">if</span>条件渲染 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"2===1"</span><span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> 和 v<span class="token operator">-</span><span class="token keyword">else</span> <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n === 1"</span><span class="token operator">&gt;</span>Angular<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n === 2"</span><span class="token operator">&gt;</span>React<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n === 3"</span><span class="token operator">&gt;</span>Vue<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">&gt;</span>hhhh<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>template 和 v<span class="token operator">-</span><span class="token keyword">if</span>配合使用  <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n===1"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token number">111</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token number">2222</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token number">3333</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础笔记(一)</title>
      <link href="/2021/09/10/vue-ji-chu-bi-ji-yi/"/>
      <url>/2021/09/10/vue-ji-chu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基础-相关笔记（1）"><a href="#Vue基础-相关笔记（1）" class="headerlink" title="Vue基础 相关笔记（1）"></a>Vue基础 相关笔记（1）</h1><h3 id="vue-的两个特性"><a href="#vue-的两个特性" class="headerlink" title="vue 的两个特性"></a>vue 的两个特性</h3><ol><li><p><strong>数据驱动视图</strong>：</p><ul><li>数据的变化<strong>会驱动视图</strong>自动更新</li><li>好处：程序员只管把数据维护好，那么页面结构会被 vue 自动渲染出来！</li></ul></li><li><p><strong>双向数据绑定</strong>：</p><blockquote><p>在网页中，form 表单负责<strong>采集数据</strong>，Ajax 负责<strong>提交数据</strong>。</p></blockquote><ul><li>js 数据的变化，会被自动渲染到页面上</li><li>页面上表单采集的数据发生变化的时候，会被 vue 自动获取到，并更新到 js 数据中</li></ul></li></ol><blockquote><p>注意：数据驱动视图和双向数据绑定的底层原理是 <strong>MVVM</strong>（<strong>Mode</strong> 数据源、<strong>View</strong> 视图、<strong>ViewModel</strong> 就是 vue 的实例）</p></blockquote><h3 id="1-1vue初印象"><a href="#1-1vue初印象" class="headerlink" title="1.1vue初印象"></a>1.1vue初印象</h3><h4 id="1-1-1初识vue"><a href="#1-1-1初识vue" class="headerlink" title="1.1.1初识vue"></a>1.1.1初识vue</h4><p> <a href="https://cn.vuejs.org/js/vue.js">vue.js开发版下载</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入vue <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/vue.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>初识vue<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>school<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>姓名为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>年龄为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token comment">// 创建一个vue实例</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment">// 指定当前挂载的容器 这里一般使用的是id选择器 当然也可以用类选择器</span>            el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token comment">// data用于存放数据 </span>            data<span class="token operator">:</span> <span class="token punctuation">{</span>                school<span class="token operator">:</span> <span class="token string">'五道口幼儿园'</span><span class="token punctuation">,</span>                person<span class="token operator">:</span> <span class="token punctuation">{</span>                    name<span class="token operator">:</span> <span class="token string">'vans'</span><span class="token punctuation">,</span>                    age<span class="token operator">:</span> <span class="token number">18</span>                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// 这里其实也可以创建多个vue实例，但一般只创建一个vue实例</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-2表达式解析"><a href="#1-1-2表达式解析" class="headerlink" title="1.1.2表达式解析"></a>1.1.2表达式解析</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里补充下表达式 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里展示的是 name <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">,</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里展示的是 age 注意这里加了括号 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">,</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> 这里展示的 age <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2vue模板语法"><a href="#1-2vue模板语法" class="headerlink" title="1.2vue模板语法"></a>1.2vue模板语法</h3><table><thead><tr><th align="left"><strong>1.插值语法：</strong></th></tr></thead><tbody><tr><td align="left">功能：用于解析标签体内容。</td></tr><tr><td align="left">写法：，xxx是js表达式，且可以直接读取到data中的所有属性。</td></tr><tr><td align="left">==注意：插值表达式只能用在元素的<strong>内容节点</strong>中，不能用在元素的<strong>属性节点</strong>中！==</td></tr><tr><td align="left"><strong>2.指令语法：</strong></td></tr><tr><td align="left">功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。</td></tr><tr><td align="left">举例：v-bind:href=”xxx” 或  简写为 :href=”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 插值语法 <span class="token operator">--</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>school<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>姓名为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>年龄为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指令语法 <span class="token operator">--</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>a v<span class="token operator">-</span>bind<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">&gt;</span>跳转链接<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>bind简写  <span class="token operator">--</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>a <span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">&gt;</span>baidu<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-数据绑定"><a href="#1-3-数据绑定" class="headerlink" title="1.3 数据绑定"></a>1.3 数据绑定</h3><table><thead><tr><th>Vue中有2种数据绑定的方式：</th></tr></thead><tbody><tr><td>1.**单向绑定(v-bind)**：数据只能从data流向页面。</td></tr><tr><td>2.**双向绑定(v-model)**：数据不仅能从data流向页面，还可以从页面流向data。</td></tr><tr><td>备注：</td></tr><tr><td>1. 双向绑定一般都应用在<strong>表单类元素</strong>上（如：<strong>input</strong>、<strong>select</strong>等）</td></tr><tr><td>2. v-model:value 可以简写为 <strong>v-model</strong>，因为v-model默认收集的就是value值。</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里都适用的简写  <span class="token operator">--</span><span class="token operator">&gt;</span>      单向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">'msg'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      双向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">'msg'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-4-el和data的两种写法"><a href="#1-4-el和data的两种写法" class="headerlink" title="1.4 el和data的两种写法"></a>1.4 el和data的两种写法</h3><table><thead><tr><th align="left"></th></tr></thead><tbody><tr><td align="left"><strong>1. el有2种写法</strong></td></tr><tr><td align="left">(1).new Vue时候配置el属性。</td></tr><tr><td align="left">(2).先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</td></tr><tr><td align="left"><strong>2. data有2种写法</strong></td></tr><tr><td align="left">(1).对象式</td></tr><tr><td align="left">(2).函数式</td></tr><tr><td align="left">如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</td></tr><tr><td align="left">3.一个重要的原则：</td></tr><tr><td align="left"><strong>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</strong></td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// el的两种写法</span><span class="token comment">// const v = new Vue({</span><span class="token comment">//     // el: '#root',  //第一种写法</span><span class="token comment">//     data: {</span><span class="token comment">//         name: 'vanous',</span><span class="token comment">//         address: '武汉',</span><span class="token comment">//     }</span><span class="token comment">// })</span><span class="token comment">// console.log(v)</span><span class="token comment">// v.$mount('#root') //第二种写法</span><span class="token comment">//data的两种写法</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    <span class="token comment">// data第一种写法 （对象式）</span>    <span class="token comment">// data: {</span>    <span class="token comment">//     name: 'vaous' </span>    <span class="token comment">// }</span>    <span class="token comment">// data的第二种写法 （函数式）</span>    <span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'vanous'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-MVVM模型"><a href="#1-5-MVVM模型" class="headerlink" title="1.5 MVVM模型"></a>1.5 MVVM模型</h3><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210910181834851.png" alt="MVVM模型图"></p><p><strong>View</strong>：                               <strong>页面</strong>结构</p><p><strong>Model</strong>：                             <strong>data</strong>中的<strong>数据</strong></p><p><strong>VM（ViewModel）</strong>：     <strong>Vue</strong>中的<strong>实例对象</strong>    <strong>MVVM</strong>的<strong>核心</strong></p><h3 id="1-6数据代理"><a href="#1-6数据代理" class="headerlink" title="1.6数据代理"></a>1.6数据代理</h3><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210910183244000.png" alt="数据代理图示"></p><table><thead><tr><th align="left"><strong>1.Vue中的数据代理：</strong></th></tr></thead><tbody><tr><td align="left">通过vm对象来代理data对象中属性的操作（读/写）</td></tr><tr><td align="left"><strong>2.Vue中数据代理的好处：</strong></td></tr><tr><td align="left">更加方便的操作data中的数据</td></tr><tr><td align="left"><strong>3.基本原理：</strong></td></tr><tr><td align="left">通过Object.defineProperty()把data对象中所有属性添加到vm上。</td></tr><tr><td align="left">为每一个添加到vm上的属性，都指定一个getter/setter。</td></tr><tr><td align="left">在getter/setter内部去操作（读/写）data中对应的属性。</td></tr></tbody></table><p>数据收集存放在 <strong>vm._data</strong> 里面，能够更高效的监视数据。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span><span class="token comment">// 模拟数据代理</span><span class="token keyword">let</span> _data <span class="token operator">=</span> <span class="token punctuation">{</span>msg<span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">}</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span><span class="token string">'msg'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        _data<span class="token punctuation">.</span>msg <span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> _data<span class="token punctuation">.</span>msg    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'hhh'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT 主题版本问题</title>
      <link href="/2021/08/31/next-zhu-ti/"/>
      <url>/2021/08/31/next-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="next主题版本问题"><a href="#next主题版本问题" class="headerlink" title="next主题版本问题"></a><strong>next主题</strong>版本问题</h1><h3 id="NexT-V5版本安装配置"><a href="#NexT-V5版本安装配置" class="headerlink" title="NexT V5版本安装配置"></a>NexT V5版本安装配置</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 老版本next主题的安装  【NexT V5 版本】git clone https://github.com/iissnan/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上是将 <strong>Next</strong> 主题【V5】下载到<strong>blog</strong>目录的 <strong>themes</strong> 主题下的 <strong>next <strong>文件夹中；首先打开站点的</strong>_config.yml</strong> 的配置文件【滑到最下面】，首先修改主题为 <strong>next</strong></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831085833241.png" alt="主题设置为next"></p><p>这里还需要设置下 语言 为 <strong>zh-Hans</strong> 【这里在站点的**_config.yml** 的配置文件最上面】</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831085951721.png" alt="修改语言为zh-Hans"></p><p>然后打开 <strong>theme</strong> 文件中 <strong>next</strong> 主题文件中的 <strong>_config.yml</strong> 配置文件，<code>这里不是上面的站点文件</code> ，找到<strong>主题</strong>配置文件中的 <strong>_config.yml</strong> 中的 <strong>Scheme Setting</strong> 对其进行修改，</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090349006.png" alt="themes文件夹"></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090517504.png" alt="next文件夹"></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090542289.png" alt="_config.yml文件"></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090825310.png" alt="主题样式设置"></p><p>将<strong>主题</strong>改为 <strong>next</strong> 之后 ，执行如下命令，查看是否修改成功</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 清除hexo缓存hexo clean# 生成静态文件hexo g# 开启本地预览hexo s# 部署到github中hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NexT-V7-版本配置"><a href="#NexT-V7-版本配置" class="headerlink" title="NexT V7+版本配置"></a>NexT V7+版本配置</h3><p>这里先贴下官网关于新版本的解释 <a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md%EF%BC%9B">https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md；</a></p><p>在 5.1.x 版本和新版本之间没有很大的革命性改进。主版本号变更至 7 主要是因为：</p><ol><li>主仓库已从 <a href="https://github.com/iissnan/hexo-theme-next">iissnan 名下</a> 迁移至 <a href="https://github.com/theme-next">theme-next</a> 组织。</li><li><code>next/source/lib</code> 目录下的绝大多数库被移出到了 <a href="https://github.com/theme-next">NexT 组织的外部仓库</a>中。</li><li>第三方插件 <a href="https://github.com/willin/hexo-wordcount"><code>hexo-wordcount</code></a> 被 <a href="https://github.com/theme-next/hexo-symbols-count-time"><code>hexo-symbols-count-time</code></a> 所取代，因为 <code>hexo-symbols-count-time</code> 没有任何外部 Node.js 依赖、也没有会导致生成站点时的性能问题 <a href="https://github.com/willin/hexo-wordcount/issues/7">language filter</a>。</li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 安装新版本的 next 主题git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如此，你可以在不修改原有的 NexT v5.1.x 目录的同时使用 <code>next-reloaded</code> 目录中的新版本主题。</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831092443586.png" alt="安装新版本next主题成功截图"></p><p>显示上面的提示，即为安装成功；然后修改主题为： <strong>next-reloaded</strong></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831092648249.png" alt="修改主题"></p><p><strong>更新语言配置</strong></p><p>从 v6.0.3 版本起，<code>zh-Hans</code> 改名为 <code>zh-CN</code>：<a href="https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3">https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3</a></p><p>升级到 v6.0.3 及以后版本的用户，需要显式修改 Hexo 主配置文件 <code>_config.yml</code> 里的 <code>language</code> 配置，否则语言显示不正确。</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831092820091.png" alt="修改语言"></p><p>这里就是新版本的所有设置，然后再将如下命令执行下：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 清除hexo缓存hexo clean# 生成静态文件hexo g# 开启本地预览hexo s# 部署到github中hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里提醒下，可能github.io更新需要点时间，刷新之后等待一下，看主题是否修改成功；下面就是成功修改主题为 Next 的截图。</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831093407346.png" alt="next主题博客预览"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
