<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue基础笔记(一)</title>
      <link href="/2021/09/10/vue-ji-chu-bi-ji-yi/"/>
      <url>/2021/09/10/vue-ji-chu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基础-相关笔记（1）"><a href="#Vue基础-相关笔记（1）" class="headerlink" title="Vue基础 相关笔记（1）"></a>Vue基础 相关笔记（1）</h1><h3 id="vue-的两个特性"><a href="#vue-的两个特性" class="headerlink" title="vue 的两个特性"></a>vue 的两个特性</h3><ol><li><p><strong>数据驱动视图</strong>：</p><ul><li>数据的变化<strong>会驱动视图</strong>自动更新</li><li>好处：程序员只管把数据维护好，那么页面结构会被 vue 自动渲染出来！</li></ul></li><li><p><strong>双向数据绑定</strong>：</p><blockquote><p>在网页中，form 表单负责<strong>采集数据</strong>，Ajax 负责<strong>提交数据</strong>。</p></blockquote><ul><li>js 数据的变化，会被自动渲染到页面上</li><li>页面上表单采集的数据发生变化的时候，会被 vue 自动获取到，并更新到 js 数据中</li></ul></li></ol><blockquote><p>注意：数据驱动视图和双向数据绑定的底层原理是 <strong>MVVM</strong>（<strong>Mode</strong> 数据源、<strong>View</strong> 视图、<strong>ViewModel</strong> 就是 vue 的实例）</p></blockquote><h3 id="1-1vue初印象"><a href="#1-1vue初印象" class="headerlink" title="1.1vue初印象"></a>1.1vue初印象</h3><h4 id="1-1-1初识vue"><a href="#1-1-1初识vue" class="headerlink" title="1.1.1初识vue"></a>1.1.1初识vue</h4><p> <a href="https://cn.vuejs.org/js/vue.js">vue.js开发版下载</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入vue <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/vue.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>初识vue<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>school<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>姓名为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>年龄为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token comment">// 创建一个vue实例</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment">// 指定当前挂载的容器 这里一般使用的是id选择器 当然也可以用类选择器</span>            el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token comment">// data用于存放数据 </span>            data<span class="token operator">:</span> <span class="token punctuation">{</span>                school<span class="token operator">:</span> <span class="token string">'五道口幼儿园'</span><span class="token punctuation">,</span>                person<span class="token operator">:</span> <span class="token punctuation">{</span>                    name<span class="token operator">:</span> <span class="token string">'vans'</span><span class="token punctuation">,</span>                    age<span class="token operator">:</span> <span class="token number">18</span>                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// 这里其实也可以创建多个vue实例，但一般只创建一个vue实例</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-2表达式解析"><a href="#1-1-2表达式解析" class="headerlink" title="1.1.2表达式解析"></a>1.1.2表达式解析</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里补充下表达式 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里展示的是 name <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">,</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里展示的是 age 注意这里加了括号 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">,</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> 这里展示的 age <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2vue模板语法"><a href="#1-2vue模板语法" class="headerlink" title="1.2vue模板语法"></a>1.2vue模板语法</h3><table><thead><tr><th align="left"><strong>1.插值语法：</strong></th></tr></thead><tbody><tr><td align="left">功能：用于解析标签体内容。</td></tr><tr><td align="left">写法：，xxx是js表达式，且可以直接读取到data中的所有属性。</td></tr><tr><td align="left">==注意：插值表达式只能用在元素的<strong>内容节点</strong>中，不能用在元素的<strong>属性节点</strong>中！==</td></tr><tr><td align="left"><strong>2.指令语法：</strong></td></tr><tr><td align="left">功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。</td></tr><tr><td align="left">举例：v-bind:href=”xxx” 或  简写为 :href=”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 插值语法 <span class="token operator">--</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>school<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>姓名为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>年龄为：<span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指令语法 <span class="token operator">--</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>a v<span class="token operator">-</span>bind<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">&gt;</span>跳转链接<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>bind简写  <span class="token operator">--</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>a <span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">&gt;</span>baidu<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-数据绑定"><a href="#1-3-数据绑定" class="headerlink" title="1.3 数据绑定"></a>1.3 数据绑定</h3><table><thead><tr><th>Vue中有2种数据绑定的方式：</th></tr></thead><tbody><tr><td>1.**单向绑定(v-bind)**：数据只能从data流向页面。</td></tr><tr><td>2.**双向绑定(v-model)**：数据不仅能从data流向页面，还可以从页面流向data。</td></tr><tr><td>备注：</td></tr><tr><td>1. 双向绑定一般都应用在<strong>表单类元素</strong>上（如：<strong>input</strong>、<strong>select</strong>等）</td></tr><tr><td>2. v-model:value 可以简写为 <strong>v-model</strong>，因为v-model默认收集的就是value值。</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里都适用的简写  <span class="token operator">--</span><span class="token operator">&gt;</span>      单向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">'msg'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>      双向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">'msg'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-4-el和data的两种写法"><a href="#1-4-el和data的两种写法" class="headerlink" title="1.4 el和data的两种写法"></a>1.4 el和data的两种写法</h3><table><thead><tr><th align="left"></th></tr></thead><tbody><tr><td align="left"><strong>1. el有2种写法</strong></td></tr><tr><td align="left">(1).new Vue时候配置el属性。</td></tr><tr><td align="left">(2).先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</td></tr><tr><td align="left"><strong>2. data有2种写法</strong></td></tr><tr><td align="left">(1).对象式</td></tr><tr><td align="left">(2).函数式</td></tr><tr><td align="left">如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</td></tr><tr><td align="left">3.一个重要的原则：</td></tr><tr><td align="left"><strong>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</strong></td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// el的两种写法</span><span class="token comment">// const v = new Vue({</span><span class="token comment">//     // el: '#root',  //第一种写法</span><span class="token comment">//     data: {</span><span class="token comment">//         name: 'vanous',</span><span class="token comment">//         address: '武汉',</span><span class="token comment">//     }</span><span class="token comment">// })</span><span class="token comment">// console.log(v)</span><span class="token comment">// v.$mount('#root') //第二种写法</span><span class="token comment">//data的两种写法</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    <span class="token comment">// data第一种写法 （对象式）</span>    <span class="token comment">// data: {</span>    <span class="token comment">//     name: 'vaous' </span>    <span class="token comment">// }</span>    <span class="token comment">// data的第二种写法 （函数式）</span>    <span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'vanous'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-MVVM模型"><a href="#1-5-MVVM模型" class="headerlink" title="1.5 MVVM模型"></a>1.5 MVVM模型</h3><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210910181834851.png" alt="MVVM模型图"></p><p><strong>View</strong>：                               <strong>页面</strong>结构</p><p><strong>Model</strong>：                             <strong>data</strong>中的<strong>数据</strong></p><p><strong>VM（ViewModel）</strong>：     <strong>Vue</strong>中的<strong>实例对象</strong>    <strong>MVVM</strong>的<strong>核心</strong></p><h3 id="1-6数据代理"><a href="#1-6数据代理" class="headerlink" title="1.6数据代理"></a>1.6数据代理</h3><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210910183244000.png" alt="数据代理图示"></p><table><thead><tr><th align="left"><strong>1.Vue中的数据代理：</strong></th></tr></thead><tbody><tr><td align="left">通过vm对象来代理data对象中属性的操作（读/写）</td></tr><tr><td align="left"><strong>2.Vue中数据代理的好处：</strong></td></tr><tr><td align="left">更加方便的操作data中的数据</td></tr><tr><td align="left"><strong>3.基本原理：</strong></td></tr><tr><td align="left">通过Object.defineProperty()把data对象中所有属性添加到vm上。</td></tr><tr><td align="left">为每一个添加到vm上的属性，都指定一个getter/setter。</td></tr><tr><td align="left">在getter/setter内部去操作（读/写）data中对应的属性。</td></tr></tbody></table><p>数据收集存放在 <strong>vm._data</strong> 里面，能够更高效的监视数据。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span><span class="token comment">// 模拟数据代理</span><span class="token keyword">let</span> _data <span class="token operator">=</span> <span class="token punctuation">{</span>msg<span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">}</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span><span class="token string">'msg'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        _data<span class="token punctuation">.</span>msg <span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> _data<span class="token punctuation">.</span>msg    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'hhh'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT 主题版本问题</title>
      <link href="/2021/08/31/next-zhu-ti/"/>
      <url>/2021/08/31/next-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="next主题版本问题"><a href="#next主题版本问题" class="headerlink" title="next主题版本问题"></a><strong>next主题</strong>版本问题</h1><h3 id="NexT-V5版本安装配置"><a href="#NexT-V5版本安装配置" class="headerlink" title="NexT V5版本安装配置"></a>NexT V5版本安装配置</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 老版本next主题的安装  【NexT V5 版本】git clone https://github.com/iissnan/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上是将 <strong>Next</strong> 主题【V5】下载到<strong>blog</strong>目录的 <strong>themes</strong> 主题下的 <strong>next <strong>文件夹中；首先打开站点的</strong>_config.yml</strong> 的配置文件【滑到最下面】，首先修改主题为 <strong>next</strong></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831085833241.png" alt="主题设置为next"></p><p>这里还需要设置下 语言 为 <strong>zh-Hans</strong> 【这里在站点的**_config.yml** 的配置文件最上面】</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831085951721.png" alt="修改语言为zh-Hans"></p><p>然后打开 <strong>theme</strong> 文件中 <strong>next</strong> 主题文件中的 <strong>_config.yml</strong> 配置文件，<code>这里不是上面的站点文件</code> ，找到<strong>主题</strong>配置文件中的 <strong>_config.yml</strong> 中的 <strong>Scheme Setting</strong> 对其进行修改，</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090349006.png" alt="themes文件夹"></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090517504.png" alt="next文件夹"></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090542289.png" alt="_config.yml文件"></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831090825310.png" alt="主题样式设置"></p><p>将<strong>主题</strong>改为 <strong>next</strong> 之后 ，执行如下命令，查看是否修改成功</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 清除hexo缓存hexo clean# 生成静态文件hexo g# 开启本地预览hexo s# 部署到github中hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NexT-V7-版本配置"><a href="#NexT-V7-版本配置" class="headerlink" title="NexT V7+版本配置"></a>NexT V7+版本配置</h3><p>这里先贴下官网关于新版本的解释 <a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md%EF%BC%9B">https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md；</a></p><p>在 5.1.x 版本和新版本之间没有很大的革命性改进。主版本号变更至 7 主要是因为：</p><ol><li>主仓库已从 <a href="https://github.com/iissnan/hexo-theme-next">iissnan 名下</a> 迁移至 <a href="https://github.com/theme-next">theme-next</a> 组织。</li><li><code>next/source/lib</code> 目录下的绝大多数库被移出到了 <a href="https://github.com/theme-next">NexT 组织的外部仓库</a>中。</li><li>第三方插件 <a href="https://github.com/willin/hexo-wordcount"><code>hexo-wordcount</code></a> 被 <a href="https://github.com/theme-next/hexo-symbols-count-time"><code>hexo-symbols-count-time</code></a> 所取代，因为 <code>hexo-symbols-count-time</code> 没有任何外部 Node.js 依赖、也没有会导致生成站点时的性能问题 <a href="https://github.com/willin/hexo-wordcount/issues/7">language filter</a>。</li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 安装新版本的 next 主题git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如此，你可以在不修改原有的 NexT v5.1.x 目录的同时使用 <code>next-reloaded</code> 目录中的新版本主题。</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831092443586.png" alt="安装新版本next主题成功截图"></p><p>显示上面的提示，即为安装成功；然后修改主题为： <strong>next-reloaded</strong></p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831092648249.png" alt="修改主题"></p><p><strong>更新语言配置</strong></p><p>从 v6.0.3 版本起，<code>zh-Hans</code> 改名为 <code>zh-CN</code>：<a href="https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3">https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3</a></p><p>升级到 v6.0.3 及以后版本的用户，需要显式修改 Hexo 主配置文件 <code>_config.yml</code> 里的 <code>language</code> 配置，否则语言显示不正确。</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831092820091.png" alt="修改语言"></p><p>这里就是新版本的所有设置，然后再将如下命令执行下：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 清除hexo缓存hexo clean# 生成静态文件hexo g# 开启本地预览hexo s# 部署到github中hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里提醒下，可能github.io更新需要点时间，刷新之后等待一下，看主题是否修改成功；下面就是成功修改主题为 Next 的截图。</p><p><img src="https://gitee.com/lin2000h/images/raw/master/image-20210831093407346.png" alt="next主题博客预览"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
